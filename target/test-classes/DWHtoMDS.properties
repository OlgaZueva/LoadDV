cleanedCustomersNamesTable.create = if object_id('etl.CleanedCustomersNamesTable_OZ','U') is null create table etl.CleanedCustomersNamesTable_OZ (dwhIdHubCustomer int, customerName nvarchar (100), tnsNumber nvarchar(30))
cleanedCustomersNamesTable1.create = if object_id('etl.CleanedCustomersNamesTable_OZ1','U') is null create table etl.CleanedCustomersNamesTable_OZ1 (dwhIdHubCustomer int, customerName nvarchar (100), tnsNumber nvarchar(30))
dictExcludedSymbolsTable.create = if object_id('etl.DictExcludedSymbols_OZ','U') is null create table etl.DictExcludedSymbols_OZ (name nvarchar (100))
dictEmptyCustomerTable.create = if object_id('etl.DictEmptyCustomer_OZ','U') is null CREATE  table  etl.DictEmptyCustomer_OZ (name nvarchar (100))
dictExceptionalCustomerTable.create = if object_id('etl.DictExceptionalCustomer_OZ','U') is null create table etl.DictExceptionalCustomer_OZ (name nvarchar (100))
dictMasterCustomerNameTable.create = if object_id('etl.DictMasterCustomerName_OZ','U') is null create table etl.DictMasterCustomerName_OZ (name nvarchar (100))
dictLocations.create = if object_id('etl.DictLocations_OZ','U') is null create table etl.DictLocations_OZ (name nvarchar (100), code nvarchar(30))
realCustomerTable.create = if object_id('etl.RealCustomersTable_OZ','U') is null create table etl.RealCustomersTable_OZ (dwhIdHubBooking int, dwhIdHubCustomer int, customerName nvarchar (100), isExceptional nvarchar(1), role int)
iBox.linkTable.create = if object_id('etl.LinkIboxData_OZ','U') is null create table etl.LinkIboxData_OZ (dwhIdHubIboxData int, dwhIdHubPPCCEE int, dwhIdHubFullEmpty int, dwhIdHubLocationsPOL int, dwhIdHubLocationsPOD int, dwhIdHubLocationsPORT_TRANS int, dwhIdHubLocationsPORT_TRANS2 int, dwhIdHubLocationsPLR int, dwhIdHubLocationsPLD int, dwhIdHubLocationsOCEAN_TS_PORT int, dwhIdHubCustomersBOOK_PARTY int, dwhIdHubCustomersSHIPPER int, dwhIdHubCustomersNOTYFY int, dwhIdHubCustomersCONSIGNEE int, dwhIdHubCustomersFORWARDER int, dwhIdHubCustomersFRAIGHT_PAYER int, dwhIdHubCustomersSTAT_CUSTOMER int, dwhIdHubCONTAINER_TYPE int, dwhIdHubIMPORT_EXPORT int, dwhIdHubSPECIAL_CONTRACT_TYPES int, dwhIdHubOCEAN_VESSEL_STATUS int, dwhIdHubCROSS_BOOKING_TYPE int )
mapMarketShareTable.create = if object_id('etl.mapMarketShare_OZ','U') is null create table etl.mapMarketShare_OZ (year nvarchar (10), month nvarchar (10), name nvarchar (30),  marketTeusDryKop smallint,marketTeusReeferKop smallint, marketTeusDryRix smallint, marketTeusReeferRix smallint,  marketTeusDryVno smallint,marketTeusReeferVno smallint,  marketTeusDryTal smallint, marketTeusReeferTal smallint,  marketTeusDryMeeAdriatic smallint,  marketTeusReeferMeeAdriatic smallint, marketTeusDryMeeScanbalt smallint,  marketTeusReeferMeeScanbalt smallint,  marketTeusDryGot smallint,  marketTeusReeferGot smallint,  marketTeusDryOsl smallint, marketTeusReeferOsl smallint,  marketTeusDryHki smallint,  marketTeusReeferHki smallint,  marketTeusDryBud smallint,  marketTeusReeferBud smallint,  marketTeusDryGdy smallint, marketTeusReeferGdy smallint,  marketTeusDryMsq smallint,  marketTeusReeferMsq smallint,  marketTeusDryRjk smallint,  marketTeusReeferRjk smallint,  marketTeusDryAar smallint, marketTeusReeferAar smallint,  marketTeusDrySjj smallint,  marketTeusReeferSjj smallint )
cleanedCustomersNamesTable.tnsNumber.update = update etl.CleanedCustomersNamesTable_OZ set tnsNumber = null where tnsNumber='null'
cleanedCustomersNamesTable.customerName.update = update etl.CleanedCustomersNamesTable_OZ set customername = null where customername='null'
cleanedCustomersNamesTable1.update = update etl.CleanedCustomersNamesTable_OZ1 set tnsNumber = null where tnsNumber='null'

cleanedCustomersNamesTable.truncate = truncate table etl.CleanedCustomersNamesTable_OZ
cleanedCustomersNamesTable1.truncate = truncate table etl.CleanedCustomersNamesTable_OZ1
dictExcludedSymbols.truncate = truncate table etl.DictExcludedSymbols_OZ
dictEmptyCustomerTable.truncate = truncate table etl.DictEmptyCustomer_OZ
dictExceptionalCustomer.truncate = truncate table etl.DictExceptionalCustomer_OZ
dictMasterCustomerName.truncate = truncate table etl.DictMasterCustomerName_OZ
dictLocations.truncate = truncate table etl.DictLocations_OZ
realCustomer.truncate = truncate table etl.RealCustomersTable_OZ
iBox.linkTable.truncate = truncate table etl.LinkIboxData_OZ
mapMarketShareTable.truncate = truncate table etl.mapMarketShare_OZ

cleanedCustomersNamesTable.insert = insert into etl.CleanedCustomersNamesTable_OZ (dwhIdHubCustomer, customerName, tnsNumber) values (
cleanedCustomersNamesTable1.insert = insert into etl.CleanedCustomersNamesTable_OZ1 (dwhIdHubCustomer, customerName, tnsNumber) values (
dictExcludedSymbols.insert = insert into etl.dictExcludedSymbols_OZ (name) values (
dictEmptyCustomerTable.insert = insert into etl.DictEmptyCustomer_OZ (name) values (
dictExceptionalCustomer.insert = insert into etl.dictExceptionalCustomer_OZ (name) values (
dictMasterCustomerName.insert = insert into etl.DictMasterCustomerName_OZ (name, code) values (
dictLocations.insert = insert into etl.DictLocations_OZ (name, code) values (
realCustomer.insert = insert into etl.RealCustomersTable_OZ (dwhIdHubBooking, dwhIdHubCustomer, customerName, isExceptional, role) values (
iBox.insert = insert into etl.LinkIboxData_OZ (dwhIdHubIboxData, dwhIdHubPPCCEE, dwhIdHubFullEmpty, dwhIdHubLocationsPOL, dwhIdHubLocationsPOD, dwhIdHubLocationsPORT_TRANS, dwhIdHubLocationsPORT_TRANS2, dwhIdHubLocationsPLR, dwhIdHubLocationsPLD, dwhIdHubLocationsOCEAN_TS_PORT, dwhIdHubCustomersBOOK_PARTY, dwhIdHubCustomersSHIPPER, dwhIdHubCustomersNOTYFY, dwhIdHubCustomersCONSIGNEE, dwhIdHubCustomersFORWARDER, dwhIdHubCustomersFRAIGHT_PAYER, dwhIdHubCustomersSTAT_CUSTOMER, dwhIdHubCONTAINER_TYPE, dwhIdHubIMPORT_EXPORT, dwhIdHubSPECIAL_CONTRACT_TYPES, dwhIdHubOCEAN_VESSEL_STATUS, dwhIdHubCROSS_BOOKING_TYPE) Values (
mapMarketShare.keys.insert = insert into etl.mapMarketShare_OZ (year, month, name) values (

iBox.accesCompanyId.const = 21

dictExcludedSymbols.MDS.select = select name from mdm.dictExcludedSymbols_v order by LEN (name) desc
dictExcludedSymbols.DWH.select = select name from etl.dictExcludedSymbols_OZ order by LEN (name) desc
dictEmptyCustomer.select = select name from mdm.dictEmptyCustomer_v
dictExceptionalCustomer.select = select name from mdm.dictExceptionalCustomer_v
dictMasterCustomerName.select = select name, code from mdm.DictMasterCustomerName_v
dictLocations.MDS.select = select name, code from mdm.dictLocations_v
satCustomers.names.select = select dwhIdHubCustomers, UPPER(customerName) as customerName, TMScustomerNr from sat.satCustomers
satCustomers1.names.select = select top(200) dwhIdHubCustomers, UPPER(customerName) as customerName, TMScustomerNr from sat.satCustomers


locations.DWH.count = select count (*) c from (select distinct hubLoc.locationCode from hub.hubLocations hubLoc inner join (select dwhIdHubLocations, locationName from sat.satLocations where hasManifests = 'Y') sat on sat.dwhIdHubLocations = hubLoc.dwhIdHubLocations)q
locations.MDS.count = select count (*) c from mdm.dictLocations_v
marketShare.DWH.count =
marketShare.MDS.count =
mapMarketShare.sqlKeys.select = select distinct year, month, name from (select distinct hubAgencyLoc.year,  hubAgencyLoc.month, dictLoc.name,  hubAgencyLoc.agencyCode, hubAgencyLoc.agencyRegion, hubAgencyLoc.teuForDryContainers, hubAgencyLoc.teuForReeferContainers from etl.DictLocations_OZ dictLoc inner join (select distinct hubMSh.agencyCode, hubMSh.agencyRegion, hubMSh.toLocation, hubMSh.year, hubMSh.month, sat.teuForDryContainers, sat.teuForReeferContainers from sat.satMarketShareTier4 sat inner join (select distinct hub.dwhIdHubMarketShareTier4, hub.toLocation, AGENCY_LOCATIONS.agencyCode, AGENCY_LOCATIONS.agencyRegion, hub.year, hub.month from hub.hubMarketShareTier4 hub inner join (select  distinct ctsTier4Location, ctsTier4Country, agencyCode, agencyRegion from sat.satLocationsPortsOverview where agencyCode is not null and agencyRegion is not null ) AGENCY_LOCATIONS on AGENCY_LOCATIONS.ctsTier4Location = hub.fromLocation and AGENCY_LOCATIONS.ctsTier4Country =  hub.fromCountry) hubMSh on hubMSh.dwhIdHubMarketShareTier4 =  sat.dwhIdHubMarketShareTier4) hubAgencyLoc on hubAgencyLoc.toLocation COLLATE SQL_Latin1_General_CP1_CI_AI =   dictLoc.name COLLATE SQL_Latin1_General_CP1_CI_AI)q
mapMarketShare.agencylocations.select = select  distinct  agencyCode, agencyRegion from sat.satLocationsPortsOverview where agencyCode is not null and agencyRegion is not null
mapMarketShare.teusForKeysByAgencyLocations.select = select distinct hubAgencyLoc.year,  hubAgencyLoc.month, dictLoc.name,  hubAgencyLoc.agencyCode, hubAgencyLoc.agencyRegion, hubAgencyLoc.teuForDryContainers, hubAgencyLoc.teuForReeferContainers from etl.DictLocations_OZ dictLoc inner join ( select distinct hubMSh.agencyCode, hubMSh.agencyRegion, hubMSh.toLocation, hubMSh.year, hubMSh.month, sat.teuForDryContainers, sat.teuForReeferContainers from sat.satMarketShareTier4 sat inner join (select distinct hub.dwhIdHubMarketShareTier4, hub.toLocation, AGENCY_LOCATIONS.agencyCode, AGENCY_LOCATIONS.agencyRegion, hub.year, hub.month from hub.hubMarketShareTier4 hub inner join (select  distinct ctsTier4Location, ctsTier4Country, agencyCode, agencyRegion from sat.satLocationsPortsOverview where agencyCode is not null and agencyRegion is not null) AGENCY_LOCATIONS on AGENCY_LOCATIONS.ctsTier4Location = hub.fromLocation /*and AGENCY_LOCATIONS.ctsTier4Country =  hub.fromCountry*/) hubMSh on hubMSh.dwhIdHubMarketShareTier4 =  sat.dwhIdHubMarketShareTier4) hubAgencyLoc on hubAgencyLoc.toLocation COLLATE SQL_Latin1_General_CP1_CI_AI = dictLoc.name COLLATE SQL_Latin1_General_CP1_CI_AI where



realCustomer.exportBooking.exceptionalCustomers.select = select distinct custName.dwhIdHubBooking, custName.dwhIdHubCustomers, UPPER(custName.customerName) as customerName from etl.DictExceptionalCustomer_OZ dictExceptCust inner join (select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join ( select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking  and dwhidHubCustomers != -1 and dwhIdHubCustomerParty in ((select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='StatCustomer'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Booking party'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Contract holder'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Forwarder'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Shipper'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Notify'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Consignee'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='FreightPayer'))) custByRole on  custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers) custName on custName.customerName =  UPPER(dictExceptCust.name) COLLATE SQL_Latin1_General_CP1_CS_AS
realCustomer.exportBooking.StatCustomer.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='StatCustomer')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ) 
realCustomer.exportBooking.BookingParty.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Booking party')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.ContractHolder.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Contract holder')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.Forwarder.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Forwarder') ) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.Shipper.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Shipper')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.Notify.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Notify')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.Consignee.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty = (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Consignee')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.FreightPayer.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='FreightPayer')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)

realCustomer.nonExportBooking.StatCustomer.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='StatCustomer')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ) 
realCustomer.nonExportBooking.BookingParty.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Booking party')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.ContractHolder.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Contract holder')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.Forwarder.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Forwarder') ) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.Shipper.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Shipper')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.Notify.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Notify')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.Consignee.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty = (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Consignee')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.FreightPayer.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='FreightPayer')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)

statCustomer.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='StatCustomer'
bookingParty.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Booking party'
contractHolder.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Contract holder'
forwarder.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Forwarder'
shipper.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Shipper'
notify.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Notify'
consignee.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Consignee'
freightPayer.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='FreightPayer'


iBox.allData.select = select hub.dwhIdHubIboxData, hub.accessCompanyId, src.BL_NUMBER, src.PAYM_TERMS, src.PORT_LOAD_CODE, src.BOOK_PARTY, src.PORT_DISCH_CODE, src.TS_PORT1_CODE, src.CONT_TYPE_CODE, src.SPEC_CONTR_REF, src.LQ_SHIPPER, src.OCEAN_TS_PORT_CODE, src.FULL_EMPTY, src.LQ_SLUTSPED, src.TS_PORT2_CODE, src.PLACE_OF_DELIVERY, src.LQ_CONSIGNEE, src.PLR_CODE, src.FREIGHTPAYER, src.LQ_FORWARDER, src.STAT_CUSTOMER, src.IMP_EXP, src.C_OV_STATUS, src.C_BL_NR_PREFIX from hub.hubIboxData hub inner join (select BL_NUMBER, PORT_LOAD_CODE, BOOK_PARTY, PORT_DISCH_CODE, TS_PORT1_CODE, PAYM_TERMS, CONT_TYPE_CODE, SPEC_CONTR_REF, LQ_SHIPPER, OCEAN_TS_PORT_CODE, FULL_EMPTY, LQ_SLUTSPED, TS_PORT2_CODE, PLACE_OF_DELIVERY, LQ_CONSIGNEE, PLR_CODE, FREIGHTPAYER, LQ_FORWARDER, STAT_CUSTOMER, IMP_EXP,  C_OV_STATUS, SUBSTRING(C_BL_NR_PREFIX , 1,2) as C_BL_NR_PREFIX from StagingAreaTest.[stg].[EXCEL_Ibox] where IsDeleted=0) src on hub.blNumber = src.BL_NUMBER
iBox.hubPPCCEE.select = from hub.hubPPCCEE where paymentTermName = '
iBox.hubFullEmpty.select = from hub.hubFullEmpty where fillingStatus = '
iBox.hubLocations.select = from hub.hubLocations where locationCode = '
iBox.hubCustomersPart1.select = from  hub.hubCustomers hub inner join (select dwhIdHubCustomers from sat.satCustomers where customername =UPPER('
iBox.hubCustomersPart2.select = ')) sat on hub.dwhIdHubCustomers = sat.dwhIdHubCustomers and hub.customerType='I' and hub.blNumber = '
iBox.hubContainerType.select  = from  hub.hubContainerType where containerTypeCode = '
iBox.hubImportExport.select  = from  hub.hubImportExport where importExportCode = '
iBox.hubSpecialContractTypesPart1.select  = from hub.hubSpecialContractTypes hub inner join (select dwhIdHubSpecialContractTypes, contractTypeName from sat.satSpecialContractTypes where contractTypeName = '
iBox.hubSpecialContractTypesPart2.select  = ') sat on hub.dwhIdHubSpecialContractTypes = sat.dwhIdHubSpecialContractTypes
iBox.hubOceanVesselStatus.select  = from  hub.hubOceanVesselStatus where statusCode = '
iBox.hubCrossBookingType_NA.select  = select dwhIdHubCrossBookingType from hub.hubCrossBookingType where bookTypeCode = 'NA'
iBox.hubCrossBookingType.select  = from hub.hubCrossBookingType where bookTypeCode = '

iBox.condition.countRows = select COUNT (*) C FROM ( select distinct dwhIdHubIboxData, dwhIdHubPPCCEE, dwhIdHubFullEmpty, dwhIdHubLocationsPOL , dwhIdHubLocationsPOD , dwhIdHubLocationsPORT_TRANS, dwhIdHubLocationsPORT_TRANS2 , dwhIdHubLocationsPLR , dwhIdHubLocationsPLD, dwhIdHubLocationsOCEAN_TS_PORT, dwhIdHubCustomersBOOK_PARTY , dwhIdHubCustomersSHIPPER, dwhIdHubCustomersNOTYFY , dwhIdHubCustomersCONSIGNEE, dwhIdHubCustomersFORWARDER, dwhIdHubCustomersFRAIGHT_PAYER ,dwhIdHubCustomersSTAT_CUSTOMER , dwhIdHubCONTAINER_TYPE, dwhIdHubIMPORT_EXPORT, dwhIdHubSPECIAL_CONTRACT_TYPES , dwhIdHubOCEAN_VESSEL_STATUS, dwhIdHubCROSS_BOOKING_TYPE from etl.LinkIboxData_OZ where dwhIdHubIboxData is not null and  dwhIdHubPPCCEE is not null and dwhIdHubFullEmpty is not null and dwhIdHubLocationsPOL is not null and dwhIdHubLocationsPOD is not null and dwhIdHubLocationsPORT_TRANS is not null and  dwhIdHubLocationsPORT_TRANS2 is not null and dwhIdHubLocationsPLR is not null and dwhIdHubLocationsPLD is not null and  dwhIdHubLocationsOCEAN_TS_PORT is not null and dwhIdHubCustomersBOOK_PARTY is not null and dwhIdHubCustomersSHIPPER is not null and dwhIdHubCustomersNOTYFY is not null and dwhIdHubCustomersCONSIGNEE is not null and dwhIdHubCustomersFORWARDER is not null and dwhIdHubCustomersFRAIGHT_PAYER is not null and dwhIdHubCustomersSTAT_CUSTOMER is not null and dwhIdHubCONTAINER_TYPE is not null and dwhIdHubIMPORT_EXPORT is not null and dwhIdHubSPECIAL_CONTRACT_TYPES is not null and dwhIdHubOCEAN_VESSEL_STATUS is not null and dwhIdHubCROSS_BOOKING_TYPE is not null)q
iBox.lnk.countRows = select count (*) c from lin.lnkIboxData

