cleanedCustomersNamesTable.create = create table etl.CleanedCustomersNamesTable_OZ (dwhIdHubCustomer int, customerName nvarchar (100), tnsNumber nvarchar(30))
dictExcludedSymbols.create = create table etl.DictExcludedSymbols_OZ (name nvarchar (100))
dictEmptyCustomer.create = create table etl.DictEmptyCustomer_OZ (name nvarchar (100))
dictExceptionalCustomer_OZ.create = create table etl.DictExceptionalCustomer_OZ (name nvarchar (100))
dictMasterCustomerName.create = create table etl.DictMasterCustomerName_OZ (name nvarchar (100))
dictLocations.create = create table etl.DictLocations_OZ (name nvarchar (100), code nvarchar(30))
realCustomer.create = create table etl.RealCustomersTable_OZ (dwhIdHubBooking int, dwhIdHubCustomer int, customerName nvarchar (100), isExceptional nvarchar(1), role int)


cleanedCustomersNamesTable.truncate = truncate table etl.CleanedCustomersNamesTable_OZ
dictExcludedSymbols.truncate = truncate table etl.DictExcludedSymbols_OZ
dictEmptyCustomerTable.truncate = truncate table etl.DictEmptyCustomer_OZ
dictExceptionalCustomer.truncate = truncate table etl.DictExceptionalCustomer_OZ
dictMasterCustomerName.truncate = truncate table etl.DictMasterCustomerName_OZ
dictLocations.truncate = truncate table etl.DictLocations_OZ
realCustomer.truncate = truncate table etl.RealCustomersTable_OZ

cleanedCustomersNamesTable.insert = insert into etl.CleanedCustomersNamesTable_OZ (dwhIdHubCustomer, customerName, tnsNumber) values (
dictExcludedSymbols.insert = insert into etl.dictExcludedSymbols_OZ (name) values (
dictEmptyCustomerTable.insert = insert into etl.DictEmptyCustomer_OZ (name) values (
dictExceptionalCustomer.insert = insert into etl.dictExceptionalCustomer_OZ (name) values (
dictMasterCustomerName.insert = insert into etl.DictMasterCustomerName_OZ (name, code) values (
dictLocations.insert = insert into etl.DictLocations_OZ (name, code) values (
realCustomer.insert = insert into etl.RealCustomersTable_OZ (dwhIdHubBooking, dwhIdHubCustomer, customerName, isExceptional, role) values (

dictExcludedSymbols.MDS.select = select name from mdm.dictExcludedSymbols_v order by LEN (name) desc
dictExcludedSymbols.DWH.select = select name from etl.dictExcludedSymbols_OZ order by LEN (name) desc
dictEmptyCustomer.select = select name from mdm.dictEmptyCustomer_v
dictExceptionalCustomer.select = select name from mdm.dictExceptionalCustomer_v
dictMasterCustomerName.select = select name, code from mdm.DictMasterCustomerName_v
dictLocations.select = select name, code from mdm.dictLocations_v
satCustomers.names.select = select dwhIdHubCustomers, UPPER(customerName) as customerName, TMScustomerNr from sat.satCustomers

locations.DWH.count = select count (*) c from (select distinct hubLoc.locationCode from hub.hubLocations hubLoc inner join (select dwhIdHubLocations, locationName from sat.satLocations where hasManifests = 'Y') sat on sat.dwhIdHubLocations = hubLoc.dwhIdHubLocations)q
locations.MDS.count = select count (*) c from mdm.dictLocations_v
realCustomer.count = select count (*) c from (select distinct dwhIdHubBooking, dwhIdHubCustomer, customerName  from etl.RealCustomersTable_OZ)q


realCustomer.exportBooking.exceptionalCustomers.select = select distinct custName.dwhIdHubBooking, custName.dwhIdHubCustomers, UPPER(custName.customerName) as customerName from etl.DictExceptionalCustomer_OZ dictExceptCust inner join (select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join ( select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking  and dwhidHubCustomers != -1 and dwhIdHubCustomerParty in ((select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='StatCustomer'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Booking party'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Contract holder'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Forwarder'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Shipper'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Notify'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Consignee'), (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='FreightPayer'))) custByRole on  custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers) custName on custName.customerName =  UPPER(dictExceptCust.name) COLLATE SQL_Latin1_General_CP1_CS_AS
realCustomer.exportBooking.StatCustomer.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='StatCustomer')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ) 
realCustomer.exportBooking.BookingParty.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Booking party')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.ContractHolder.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Contract holder')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.Forwarder.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Forwarder') ) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.Shipper.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Shipper')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.Notify.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Notify')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.Consignee.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty = (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Consignee')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.exportBooking.FreightPayer.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode ='E') satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='FreightPayer')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)

realCustomer.nonExportBooking.StatCustomer.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='StatCustomer')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ) 
realCustomer.nonExportBooking.BookingParty.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Booking party')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.ContractHolder.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Contract holder')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.Forwarder.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Forwarder') ) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.Shipper.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Shipper')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.Notify.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Notify')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.Consignee.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty = (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Consignee')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)
realCustomer.nonExportBooking.FreightPayer.select = select distinct custByRole.dwhIdHubBooking, custByRole.dwhIdHubCustomers, custByRole.dwhIdHubCustomerParty, UPPER (satC.customerName) as customerName from sat.satCustomers satC inner join (select satB.dwhIdHubBooking, lBC.dwhIdHubCustomers, lBC.dwhIdHubCustomerParty from lin.lnkBookingCustomers lBC inner join (select  dwhIdHubBooking from sat.satBooking where importExportCode !='T' and importExportCode != 'E' and importExportCode is not null) satB on lBC.dwhIdHubBooking = satB.dwhIdHubBooking and dwhidHubCustomers != -1 and dwhIdHubCustomerParty  =(select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='FreightPayer')) custByRole on custByRole.dwhIdHubCustomers = satC.dwhIdHubCustomers where custByRole.dwhIdHubBooking not in (select dwhIdHubBooking from etl.RealCustomersTable_OZ)

statCustomer.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='StatCustomer'
bookingParty.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Booking party'
contractHolder.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Contract holder'
forwarder.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Forwarder'
shipper.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Shipper'
notify.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Notify'
consignee.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='Consignee'
freightPayer.customerPartyID = select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyname ='FreightPayer'
