system.default.RowsForMatch = 50
system.PercentOfRows = 0.0005

customers.dwh.CountRows = select count (*) c from (select distinct dwhIdHubCustomers, validFrom from sat.satCustomers union select distinct dwhIdHubCustomers, validFrom from sat.satCustomersStatus) q
customers.dim.CountRows = select COUNT (*) c from (select dwhIdHubCustomers, validFrom  from [dim].[dimCustomers])q
customers.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by hubSat.dwhIdHubCustomers) AS RowNumber, hubSat.dwhIdHubCustomers, hubSat.customerNr, hubSat.number, hubSat.bookingNumber, hubSat.blNumber, hubSat.customerType, hubSat.refType, hubSat.customerName, hubSat.shortName, hubSat.TMScustomerNr, hubSat.address1, hubSat.address2, hubSat.address3, hubSat.email, hubSat.fax, hubSat.phone, hubSat.countryCode, hubSat.cityCode, hubSat.cityName, hubSat.masterNameCode, hubSat.clientReference, hubSat.accountManagerCode1, hubSat.accountManagerCode2, hubSat.accessCompanyId, hubSat.srcSystemId, satStatus.status, satStatus.validFrom  from sat.satCustomersStatus satStatus inner join (select distinct hub.dwhIdHubCustomers, hub.customerNr, hub.number, hub.bookingNumber, hub.blNumber, hub.customerType, hub.refType, sat.customerName, sat.shortName, sat.TMScustomerNr, sat.address1, sat.address2, sat.address3, sat.email, sat.fax, sat.phone, sat.countryCode, sat.cityCode, sat.cityName, sat.masterNameCode, sat.clientReference, sat.accountManagerCode1, sat.accountManagerCode2, hub.accessCompanyId, hub.srcSystemId  from sat.satCustomers sat inner join (select dwhIdHubCustomers, customerNr, number, bookingNumber, blNumber, customerType, refType, accessCompanyId, srcSystemId from hub.hubCustomers) hub on hub.dwhIdHubCustomers = sat.dwhIdHubCustomers) hubSat on hubSat.dwhIdHubCustomers = satStatus.dwhIdHubCustomers) q where RowNumber =
customers.dataInDM.RowByKeys = select dwhIdHubCustomers, customerNr, number, bookingNumber, blNumber, customerType, refType, customerName, shortName, TMScustomerNr, address1, address2, address3, email, fax, phone,countryCode, cityCode, cityName, masterNameCode, clientReference, accountManagerCode1, accountManagerCode2,accessCompanyId, srcSystemId, dmStatus as status, validFrom  from  dim.dimCustomers

fileLiner.dwh.CountRows = select count (*) c from (select distinct dwhIdHubFileLiner, validFrom from sat.satFileLiner union select distinct dwhIdHubFileLiner, validFrom from sat.satFileLinerStatus) q
fileLiner.dim.CountRows = select COUNT (*) c from (select dwhIdHubFileLiner, validFrom  from dim.dimFileLiner)q
fileLiner.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by hubSat.dwhIdHubFileLiner) AS RowNumber, hubSat.dwhIdHubFileLiner, hubSat.serviceCode, hubSat.fileLinerNr, hubSat.accessCompanyId, hubSat.expPolDate, hubSat.impPodDate, hubSat.voyageNr, hubSat.vesselName, hubSat.temporaryFlag, hubSat.openDate, hubSat.closeDate, hubSat.callId, hubSat.sailingWeek, hubSat.proformaDate, hubSat.status,  hubSat.srcSystemId, satStatus.status as satStatus, satStatus.validFrom from sat.satFileLinerStatus satStatus inner join (select distinct hub.dwhIdHubFileLiner, hub.serviceCode, hub.fileLinerNr, hub.accessCompanyId, sat.expPolDate, sat.impPodDate, sat.voyageNr, sat.vesselName, sat.temporaryFlag, sat.openDate, sat.closeDate, sat.callId, sat.sailingWeek, sat.proformaDate, sat.status,  hub.srcSystemId from sat.satFileLiner sat inner join (select dwhIdHubFileLiner, serviceCode, fileLinerNr, accessCompanyId,  srcSystemId  from hub.hubFileLiner) hub on hub.dwhIdHubFileLiner = sat.dwhIdHubFileLiner) hubSat on hubSat.dwhIdHubFileLiner = satStatus.dwhIdHubFileLiner) q where RowNumber =
fileLiner.dataInDM.RowByKeys = select dwhIdHubFileLiner, serviceCode, fileLinerNr, accessCompanyId, expPolDate, srcSystemId , impPodDate, voyageNr, vesselName,temporaryFlag, openDate, closeDate, callId, sailingWeek, proformaDate, status, dmStatus as satStatus, validFrom from  dim.dimFileLiner

controllingOffice.dwh.CountRows = select count (*) c from (select distinct dwhIdHubControllingOffice, validFrom from sat.satControllingOffice union select distinct dwhIdHubControllingOffice, validFrom from sat.satControllingOfficeStatus union select distinct dwhIdHubControllingOffice, validFrom from sat.satControllingOfficeAuxLocation) q
controllingOffice.dim.CountRows = select COUNT (*) c from (select dwhIdHubControllingOffice, validFrom  from dim.dimControllingOffice)q
controllingOffice.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by hubSat.dwhIdHubControllingOffice) AS RowNumber, hubSat.dwhIdHubControllingOffice, hubSat.officeId, hubSat.companyId, hubSat.companyName, hubSat.controllingOfficeFullName, hubSat.officeName, hubSat.srcSystemId, satStatus.status,  satStatus.validFrom  from sat.satControllingOfficeStatus satStatus inner join (select distinct hub.dwhIdHubControllingOffice, hub.officeId, hub.companyId, sat.companyName, sat.controllingOfficeFullName, sat.officeName, hub.srcSystemId from sat.satControllingOffice sat inner join (select dwhIdHubControllingOffice, officeId, companyId, srcSystemId  from hub.hubControllingOffice) hub on hub.dwhIdHubControllingOffice = sat.dwhIdHubControllingOffice) hubSat on hubSat.dwhIdHubControllingOffice = satStatus.dwhIdHubControllingOffice) q where RowNumber =
controllingOffice.datainDM.RowByKeys = select dwhIdHubControllingOffice, officeId, companyId, companyName, controllingOfficeFullName, officeName, srcSystemId, dmStatus as status, validFrom from  dim.dimControllingOffice

vesselRegistry.dwh.CountRows = select count (*) c from (select distinct dwhIdHubVesselRegistry, validFrom from sat.satVesselRegistry union select distinct dwhIdHubVesselRegistry, validFrom from sat.satVesselRegistryStatus) q
vesselRegistry.dim.CountRows = select COUNT (*) c from (select dwhIdHubVesselRegistry, validFrom  from dim.dimVesselRegistry)q
vesselRegistry.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by hubSat.dwhIdHubVesselRegistry) AS RowNumber, hubSat.dwhIdHubVesselRegistry, hubSat.dictionaryType, hubSat.feederCode, hubSat.sequenceNumber, hubSat.accessCompanyId, hubSat.vesselName, hubSat.callSign, hubSat.lloydsNr, hubSat.srcSystemId, satStatus.status, satStatus.validFrom  from sat.satVesselRegistryStatus satStatus inner join (select distinct hub.dwhIdHubVesselRegistry, hub.dictionaryType, hub.feederCode, hub.sequenceNumber, hub.accessCompanyId, sat.vesselName, sat.callSign, sat.lloydsNr, hub.srcSystemId from sat.satVesselRegistry sat inner join (select dwhIdHubVesselRegistry, dictionaryType, feederCode, sequenceNumber, accessCompanyId, srcSystemId  from hub.hubVesselRegistry) hub on  hub.dwhIdHubVesselRegistry = sat.dwhIdHubVesselRegistry) hubSat on hubSat.dwhIdHubVesselRegistry = satStatus.dwhIdHubVesselRegistry) q where RowNumber =
vesselRegistry.datainDM.RowByKeys = select dwhIdHubVesselRegistry, dictionaryType, feederCode, sequenceNumber, vesselName, callSign, lloydsNr, accessCompanyId, srcSystemId, dmStatus as status, validFrom from  dim.dimVesselRegistry

bookingManifest.dwh.CountRows = select count (*) c from (select distinct dwhIdHubBookingManifest, validFrom from sat.satBookingManifest union select distinct dwhIdHubBookingManifest, validFrom from sat.satBookingManifestStatus union select distinct dwhIdHubBookingManifest, validFrom from sat.satLnkBookingBookingManifest union select distinct dwhIdHubBookingManifest, validFrom from sat.satLnkBookingBookingManifestShadowCopy) q
bookingManifest.dim.CountRows = select COUNT (*) c from (select dwhIdHubBookingManifest, validFrom  from [dim].[dimBookingManifest])q
bookingManifest.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by satLnk2.dwhIdHubBookingManifest) AS RowNumber, satLnk2.dwhIdHubBookingManifest, satlnkBBM.dwhIdHubBooking as dwhIdHubBookingWorkingCopy, satLnk2.dwhIdHubBookingShadowCopy, satLnk2.bookMftId, satLnk2.accessCompanyId, satLnk2.correctorReason, satLnk2.correctorNr, satLnk2.correctorType, satLnk2.manifestType, satLnk2.createdBy, satLnk2.creationDate, satLnk2.rolloverServiceCode, satLnk2.rolloverFileLiner, satLnk2.isSplit, satLnk2.manifestFileId, satLnk2.status, satLnk2.srcSystemId, satLnk2.satStatus, satLnk2.validFrom from sat.satLnkBookingBookingManifest satlnkBBM full join (select satLnk1.dwhIdHubBookingManifest, satLnkBBMSC.dwhIdHubBooking as dwhIdHubBookingShadowCopy,  satLnk1.bookMftId, satLnk1.accessCompanyId, satLnk1.correctorReason, satLnk1.correctorNr, satLnk1.correctorType, satLnk1.manifestType, satLnk1.createdBy, satLnk1.creationDate, satLnk1.rolloverServiceCode, satLnk1.rolloverFileLiner,  satLnk1.isSplit, satLnk1.manifestFileId, satLnk1.status, satLnk1.srcSystemId,  satLnk1.satStatus, satLnk1.validFrom from sat.satLnkBookingBookingManifestShadowCopy satLnkBBMSC full join (select hubSat.dwhIdHubBookingManifest, hubSat.bookMftId, hubSat.accessCompanyId, hubSat.correctorReason, hubSat.correctorNr, hubSat.correctorType, hubSat.manifestType, hubSat.createdBy, hubSat.creationDate, hubSat.rolloverServiceCode, hubSat.rolloverFileLiner,  hubSat.isSplit, hubSat.manifestFileId, hubSat.status, hubSat.srcSystemId, satStatus.status as satStatus, satStatus.validFrom  from sat.satBookingManifestStatus satStatus inner join (select distinct hub.dwhIdHubBookingManifest, hub.bookMftId, hub.accessCompanyId, sat.correctorReason, sat.correctorNr, sat.correctorType, sat.manifestType, sat.createdBy, sat.creationDate, sat.rolloverServiceCode, sat.rolloverFileLiner, sat.isSplit, sat.manifestFileId, sat.status, hub.srcSystemId from sat.satBookingManifest sat inner join (select dwhIdHubBookingManifest, bookMftId, accessCompanyId, srcSystemId  from hub.hubBookingManifest) hub on hub.dwhIdHubBookingManifest = sat.dwhIdHubBookingManifest) hubSat on hubSat.dwhIdHubBookingManifest = satStatus.dwhIdHubBookingManifest) satLnk1 on satLnk1.dwhIdHubBookingManifest = satLnkBBMSC.dwhIdHubBookingManifest) satLnk2 on satLnk2.dwhIdHubBookingManifest = satlnkBBM.dwhIdHubBookingManifest) q where RowNumber =
bookingManifest.dataInDM.RowByKeys = select dwhIdHubBookingManifest, dwhIdHubBookingShadowCopy, dwhIdHubBookingWorkingCopy, bookMftId, correctorReason, correctorNr, correctorType, manifestType, createdBy,creationDate, rolloverServiceCode, rolloverFileLiner, isSplit, manifestFileId, status, accessCompanyId, srcSystemId, dmStatus as satStatus, validFrom, dmStatus from dim.dimBookingManifest

country.dwh.CountRows = select count (*) c from (select distinct dwhIdHubCountry, validFrom from sat.satCountry union select distinct dwhIdHubCountry, validFrom from sat.satCountryStatus) q
country.dim.CountRows = select COUNT (*) c from (select dwhIdHubCountry, validFrom  from [dim].[dimCountry])q
country.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by hubSat.dwhIdHubCountry) AS RowNumber, hubSat.dwhIdHubCountry, hubSat.countryCode, hubSat.dictionaryType, hubSat.sequenceNumber, hubSat.countryName, hubSat.accessCompanyId, hubSat.srcSystemId, satStatus.status, satStatus.validFrom  from sat.satCountryStatus satStatus inner join (select distinct hub.dwhIdHubCountry, hub.countryCode, hub.dictionaryType, hub.sequenceNumber, sat.countryName,  hub.accessCompanyId, hub.srcSystemId  from sat.satCountry sat inner join (select dwhIdHubCountry, countryCode, dictionaryType, sequenceNumber, accessCompanyId, srcSystemId from hub.hubCountry) hub on hub.dwhIdHubCountry = sat.dwhIdHubCountry) hubSat on hubSat.dwhIdHubCountry = satStatus.dwhIdHubCountry) q where RowNumber =
country.dataInDM.RowByKeys = select dwhIdHubCountry, countryCode, dictionaryType, sequenceNumber, countryName accessCompanyId, srcSystemId, dmStatus as status, validFrom  from  dim.dimCountry

gvaTrade.dwh.CountRows = select count (*) c from (select distinct  hub.accessCompanyId, sat.gvaTrade from hub.hubLocations hub inner join (select  dwhIdHubLocations, gvaTrade   from  sat.satLocations) sat on sat.dwhIdHubLocations = hub.dwhIdHubLocations)q
gvaTrade.dim.CountRows =  select COUNT (*) c from (select gvaTrade, accessCompanyId from dim.dimGvaTrade)q
gvaTrade.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by accessCompanyId) AS RowNumber, accessCompanyId, gvaTrade from (select distinct  hub.accessCompanyId, sat.gvaTrade from hub.hubLocations hub inner join (select  dwhIdHubLocations, gvaTrade from sat.satLocations) sat on sat.dwhIdHubLocations = hub.dwhIdHubLocations)w)q where RowNumber =
gvaTrade.dataInDM.RowByKeys = select gvaTrade, accessCompanyId, srcSystemId, dmStatus, validFrom, validTo from dim.dimOvTradeName

ovTradeName.union.dwh.CountRows = select count (*) c from (select distinct  hub.accessCompanyId, sat.gvaTrade from hub.hubBooking hub inner join (select  dwhIdHubBooking,  gvaTrade  from  sat.satBooking) sat on sat.dwhIdHubBooking = hub.dwhIdHubBooking union select distinct  hub.accessCompanyId, sat.ovTradeName from hub.hubLocations hub inner join (select  dwhIdHubLocations, ovTradeName   from  sat.satLocations) sat on sat.dwhIdHubLocations = hub.dwhIdHubLocations)q
ovTradeName.dim.CountRows =  select COUNT (*) c from (select ovTradeName, accessCompanyId from dim.dimOvTradeName)q
ovTradeName.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by accessCompanyId) AS RowNumber, accessCompanyId, ovTradeName from (select distinct  hub.accessCompanyId, sat.gvaTrade as ovTradeName from hub.hubBooking hub inner join (select  dwhIdHubBooking, gvaTrade  from  sat.satBooking) sat on sat.dwhIdHubBooking = hub.dwhIdHubBooking union select distinct  hub.accessCompanyId, sat.ovTradeName from hub.hubLocations hub inner join (select  dwhIdHubLocations, ovTradeName from sat.satLocations) sat on sat.dwhIdHubLocations = hub.dwhIdHubLocations)w)q where RowNumber =
ovTradeName.dataInDM.RowByKeys = select ovTradeName, accessCompanyId, srcSystemId, dmStatus, validFrom, validTo from dim.dimOvTradeName

bookingCargo.dwh.CountRows = select count (*) c from (select distinct dwhIdHubBookingCargo, validFrom from sat.satBookingCargo union select distinct dwhIdHubBookingCargo, validFrom from sat.satBookingCargoStatus union select distinct dwhIdHubBookingCargo, validFrom from sat.satLnkBookingBookingCargo) q
bookingCargo.dim.CountRows = select COUNT (*) c from (select dwhIdHubBookingCargo, validFrom  from dim.dimBookingCargo)q
bookingCargo.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by hubSatStatus.dwhIdHubBookingCargo) AS RowNumber, hubSatStatus.dwhIdHubBookingCargo, satStatus.dwhIdHubBooking,  hubSatStatus.bookingNumber, hubSatStatus.cargoLineNr, hubSatStatus.accessCompanyId, hubSatStatus.agencyHarmonizedCode, hubSatStatus.cargoWeight, hubSatStatus.tareWeight, hubSatStatus.containerNr, hubSatStatus.containerTypeCode, hubSatStatus.containerTypeName, hubSatStatus.imoClass, hubSatStatus.partLoadFlag, hubSatStatus.unNumber, hubSatStatus.cargoDescr, hubSatStatus.atmosphereControl, hubSatStatus.automaticTemperatureFlag, hubSatStatus.automaticTemperatureValue, hubSatStatus.coldTreatment, hubSatStatus.dehumidificationFlag, hubSatStatus.dehumidificationValue, hubSatStatus.bulbMode, hubSatStatus.manualTemperatureFlag, hubSatStatus.manualTemperatureValue, hubSatStatus.isOperatingReefer, hubSatStatus.temperatureUnits, hubSatStatus.minTemperature, hubSatStatus.maxTemperature, hubSatStatus.imsTransportCode, hubSatStatus.typeOfPackages, hubSatStatus.marksNumbers, hubSatStatus.sealNumber, hubSatStatus.volume, hubSatStatus.volumeUnits, hubSatStatus.feederVoyageNumber, hubSatStatus.fumigationMaterialImoClass, hubSatStatus.fumigationMaterialUnNumber, hubSatStatus.dangerousCargoResidueImoClass, hubSatStatus.dangerousCargoResidueUnNumber, hubSatStatus.kipisSendFlag, hubSatStatus.cargoBackOverDimension, hubSatStatus.cargoForeOverDimension, hubSatStatus.cargoHightOverDimension, hubSatStatus.cargoLeftOverDimension, hubSatStatus.cargoLengthOverDimension, hubSatStatus.cargoRightOverDimension, hubSatStatus.cargoWidthOverDimension, hubSatStatus.precarriageVessel, hubSatStatus.packageCount, hubSatStatus.dryPortCode, hubSatStatus.eta, hubSatStatus.sailingDate, hubSatStatus.srcSystemId, hubSatStatus.satStatus, hubSatStatus.validFrom from sat.satLnkBookingBookingCargo satStatus full join (select hubSat.dwhIdHubBookingCargo, hubSat.bookingNumber, hubSat.cargoLineNr, hubSat.accessCompanyId, hubSat.agencyHarmonizedCode, hubSat.cargoWeight, hubSat.tareWeight, hubSat.containerNr,hubSat.containerTypeCode, hubSat.containerTypeName, hubSat.imoClass, hubSat.partLoadFlag, hubSat.unNumber, hubSat.cargoDescr, hubSat.atmosphereControl, hubSat.automaticTemperatureFlag, hubSat.automaticTemperatureValue, hubSat.coldTreatment, hubSat.dehumidificationFlag, hubSat.dehumidificationValue, hubSat.bulbMode, hubSat.manualTemperatureFlag, hubSat.manualTemperatureValue, hubSat.isOperatingReefer, hubSat.temperatureUnits, hubSat.minTemperature, hubSat.maxTemperature, hubSat.imsTransportCode, hubSat.typeOfPackages, hubSat.marksNumbers, hubSat.sealNumber, hubSat.volume, hubSat.volumeUnits, hubSat.feederVoyageNumber, hubSat.fumigationMaterialImoClass, hubSat.fumigationMaterialUnNumber, hubSat.dangerousCargoResidueImoClass, hubSat.dangerousCargoResidueUnNumber, hubSat.kipisSendFlag, hubSat.cargoBackOverDimension, hubSat.cargoForeOverDimension, hubSat.cargoHightOverDimension, hubSat.cargoLeftOverDimension, hubSat.cargoLengthOverDimension, hubSat.cargoRightOverDimension, hubSat.cargoWidthOverDimension, hubSat.precarriageVessel, hubSat.packageCount, hubSat.dryPortCode, hubSat.eta, hubSat.sailingDate, hubSat.srcSystemId, satStatus.status as satStatus, satStatus.validFrom from sat.satBookingCargoStatus satStatus inner join (select distinct hub.dwhIdHubBookingCargo, hub.bookingNumber, hub.cargoLineNr, hub.accessCompanyId, sat.agencyHarmonizedCode, sat.cargoWeight, sat.tareWeight, sat.containerNr, sat.containerTypeCode, sat.containerTypeName, sat.imoClass, sat.partLoadFlag, sat.unNumber, sat.cargoDescr, sat.atmosphereControl, sat.automaticTemperatureFlag, sat.automaticTemperatureValue, sat.coldTreatment, sat.dehumidificationFlag, sat.dehumidificationValue, sat.bulbMode, sat.manualTemperatureFlag, sat.manualTemperatureValue, sat.isOperatingReefer, sat.temperatureUnits, sat.minTemperature, sat.maxTemperature, sat.imsTransportCode, sat.typeOfPackages, sat.marksNumbers, sat.sealNumber, sat.volume, sat.volumeUnits, sat.feederVoyageNumber, sat.fumigationMaterialImoClass, sat.fumigationMaterialUnNumber, sat.dangerousCargoResidueImoClass, sat.dangerousCargoResidueUnNumber, sat.kipisSendFlag, sat.cargoBackOverDimension, sat.cargoForeOverDimension, sat.cargoHightOverDimension, sat.cargoLeftOverDimension, sat.cargoLengthOverDimension, sat.cargoRightOverDimension, sat.cargoWidthOverDimension, sat.precarriageVessel,sat. packageCount, sat.dryPortCode, sat.eta, sat.sailingDate, hub.srcSystemId from sat.satBookingCargo sat inner join (select dwhIdHubBookingCargo, bookingNumber, cargoLineNr, accessCompanyId,  srcSystemId  from hub.hubBookingCargo) hub on hub.dwhIdHubBookingCargo = sat.dwhIdHubBookingCargo) hubSat on hubSat.dwhIdHubBookingCargo = satStatus.dwhIdHubBookingCargo) hubSatStatus on hubSatStatus.dwhIdHubBookingCargo = satStatus.dwhIdHubBookingCargo) q where RowNumber = 
bookingCargo.dataInDM.RowByKeys = select dwhIdHubBookingCargo, dwhIdHubBooking, bookingNumber, cargoLineNr, agencyHarmonizedCode, cargoWeight, tareWeight,containerNr, containerTypeCode, containerTypeName, imoClass, partLoadFlag, unNumber, cargoDescr, atmosphereControl, automaticTemperatureFlag, automaticTemperatureValue, coldTreatment, dehumidificationFlag, dehumidificationValue, bulbMode, manualTemperatureFlag, manualTemperatureValue, isOperatingReefer, temperatureUnits, minTemperature, maxTemperature, imsTransportCode, typeOfPackages, marksNumbers, sealNumber, volume, volumeUnits, feederVoyageNumber, fumigationMaterialImoClass, fumigationMaterialUnNumber, dangerousCargoResidueImoClass, dangerousCargoResidueUnNumber, kipisSendFlag, cargoBackOverDimension, cargoForeOverDimension, cargoHightOverDimension, cargoLeftOverDimension, cargoLengthOverDimension, cargoRightOverDimension, cargoWidthOverDimension, precarriageVessel, packageCount, dryPortCode, eta, sailingDate, accessCompanyId, srcSystemId, status, validFrom from  dim.dimBookingCargo