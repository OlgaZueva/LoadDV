system.default.RowsForMatch = 8
system.PercentOfRows = 10

common.sql.byRownum = select * from (SELECT ROW_NUMBER() OVER (Order by
common.sql.forCount = SELECT COUNT (*)c

customers.dwh.CountRows = select count (*) c from (select distinct dwhIdHubCustomers, validFrom from sat.satCustomers union select distinct dwhIdHubCustomers, validFrom from sat.satCustomersStatus) q
customers.dim.CountRows = select COUNT (*) c from (select dwhIdHubCustomers, validFrom  from [dim].[dimCustomers])q
customers.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by hubSat.dwhIdHubCustomers) AS RowNumber, hubSat.dwhIdHubCustomers, hubSat.customerNr, hubSat.number, hubSat.bookingNumber, hubSat.blNumber, hubSat.customerType, hubSat.refType, hubSat.customerName, hubSat.shortName, hubSat.TMScustomerNr, hubSat.address1, hubSat.address2, hubSat.address3, hubSat.email, hubSat.fax, hubSat.phone, hubSat.countryCode, hubSat.cityCode, hubSat.cityName, hubSat.dwhIdMasterClient,  hubSat.cleanCustomerName, hubSat.clientReference, hubSat.accountManagerCode1, hubSat.accountManagerCode2, hubSat.accessCompanyId, hubSat.srcSystemId, satStatus.status, satStatus.validFrom  from sat.satCustomersStatus satStatus inner join (select distinct hub.dwhIdHubCustomers, hub.customerNr, hub.number, hub.bookingNumber, hub.blNumber, hub.customerType, hub.refType, sat.customerName, sat.shortName, sat.TMScustomerNr, sat.address1, sat.address2, sat.address3, sat.email, sat.fax, sat.phone, sat.countryCode, sat.cityCode, sat.cityName, sat.dwhIdMasterClient, sat.cleanCustomerName, sat.clientReference, sat.accountManagerCode1, sat.accountManagerCode2, hub.accessCompanyId, hub.srcSystemId from sat.satCustomers sat inner join (select dwhIdHubCustomers, customerNr, number, bookingNumber, blNumber, customerType, refType, accessCompanyId, srcSystemId from hub.hubCustomers) hub on hub.dwhIdHubCustomers = sat.dwhIdHubCustomers) hubSat on hubSat.dwhIdHubCustomers = satStatus.dwhIdHubCustomers) q where RowNumber =
customers.dataInDM.RowByKeys = select dwhIdHubCustomers, customerNr, number, bookingNumber, blNumber, customerType, refType, customerName, shortName, TMScustomerNr, address1, address2, address3, email, fax, phone,countryCode, cityCode, cityName, dwhIdMasterClient,  cleanCustomerName, clientReference, accountManagerCode1, accountManagerCode2,accessCompanyId, srcSystemId, dmStatus as status, validFrom  from  dim.dimCustomers

country.dwh.CountRows = select count (*) c from (select distinct dwhIdHubCountry, validFrom from sat.satCountry union select distinct dwhIdHubCountry, validFrom from sat.satCountryStatus) q
country.dim.CountRows = select COUNT (*) c from (select dwhIdHubCountry, validFrom  from [dim].[dimCountry])q
country.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by hubSat.dwhIdHubCountry) AS RowNumber, hubSat.dwhIdHubCountry, hubSat.countryCode, hubSat.dictionaryType, hubSat.sequenceNumber, hubSat.countryName, hubSat.accessCompanyId, hubSat.srcSystemId, satStatus.status, satStatus.validFrom  from sat.satCountryStatus satStatus inner join (select distinct hub.dwhIdHubCountry, hub.countryCode, hub.dictionaryType, hub.sequenceNumber, sat.countryName,  hub.accessCompanyId, hub.srcSystemId  from sat.satCountry sat inner join (select dwhIdHubCountry, countryCode, dictionaryType, sequenceNumber, accessCompanyId, srcSystemId from hub.hubCountry) hub on hub.dwhIdHubCountry = sat.dwhIdHubCountry) hubSat on hubSat.dwhIdHubCountry = satStatus.dwhIdHubCountry) q where RowNumber =
country.dataInDM.RowByKeys = select dwhIdHubCountry, countryCode, dictionaryType, sequenceNumber, countryName accessCompanyId, srcSystemId, dmStatus as status, validFrom  from  dim.dimCountry

bookingCargo.dwh.CountRows = select count (*) c from (select distinct dwhIdHubBookingCargo, validFrom from sat.satBookingCargo union select distinct dwhIdHubBookingCargo, validFrom from sat.satBookingCargoStatus union select distinct dwhIdHubBookingCargo, validFrom from sat.satLnkBookingBookingCargo) q
bookingCargo.dim.CountRows = select COUNT (*) c from (select dwhIdHubBookingCargo, validFrom  from dim.dimBookingCargo)q
bookingCargo.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by hubSatStatus.dwhIdHubBookingCargo) AS RowNumber, hubSatStatus.dwhIdHubBookingCargo, satStatus.dwhIdHubBooking,  hubSatStatus.bookingNumber, hubSatStatus.cargoLineNr, hubSatStatus.accessCompanyId, hubSatStatus.agencyHarmonizedCode, hubSatStatus.cargoWeight, hubSatStatus.tareWeight, hubSatStatus.containerNr, hubSatStatus.containerTypeCode, hubSatStatus.containerTypeName, hubSatStatus.imoClass, hubSatStatus.partLoadFlag, hubSatStatus.unNumber, hubSatStatus.cargoDescr, hubSatStatus.atmosphereControl, hubSatStatus.automaticTemperatureFlag, hubSatStatus.automaticTemperatureValue, hubSatStatus.coldTreatment, hubSatStatus.dehumidificationFlag, hubSatStatus.dehumidificationValue, hubSatStatus.bulbMode, hubSatStatus.manualTemperatureFlag, hubSatStatus.manualTemperatureValue, hubSatStatus.isOperatingReefer, hubSatStatus.temperatureUnits, hubSatStatus.minTemperature, hubSatStatus.maxTemperature, hubSatStatus.imsTransportCode, hubSatStatus.typeOfPackages, hubSatStatus.marksNumbers, hubSatStatus.sealNumber, hubSatStatus.volume, hubSatStatus.volumeUnits, hubSatStatus.feederVoyageNumber, hubSatStatus.fumigationMaterialImoClass, hubSatStatus.fumigationMaterialUnNumber, hubSatStatus.dangerousCargoResidueImoClass, hubSatStatus.dangerousCargoResidueUnNumber, hubSatStatus.kipisSendFlag, hubSatStatus.cargoBackOverDimension, hubSatStatus.cargoForeOverDimension, hubSatStatus.cargoHightOverDimension, hubSatStatus.cargoLeftOverDimension, hubSatStatus.cargoLengthOverDimension, hubSatStatus.cargoRightOverDimension, hubSatStatus.cargoWidthOverDimension, hubSatStatus.precarriageVessel, hubSatStatus.packageCount, hubSatStatus.dryPortCode, hubSatStatus.eta, hubSatStatus.sailingDate, hubSatStatus.srcSystemId, hubSatStatus.satStatus as status, hubSatStatus.validFrom from sat.satLnkBookingBookingCargo satStatus full join (select hubSat.dwhIdHubBookingCargo, hubSat.bookingNumber, hubSat.cargoLineNr, hubSat.accessCompanyId, hubSat.agencyHarmonizedCode, hubSat.cargoWeight, hubSat.tareWeight, hubSat.containerNr,hubSat.containerTypeCode, hubSat.containerTypeName, hubSat.imoClass, hubSat.partLoadFlag, hubSat.unNumber, hubSat.cargoDescr, hubSat.atmosphereControl, hubSat.automaticTemperatureFlag, hubSat.automaticTemperatureValue, hubSat.coldTreatment, hubSat.dehumidificationFlag, hubSat.dehumidificationValue, hubSat.bulbMode, hubSat.manualTemperatureFlag, hubSat.manualTemperatureValue, hubSat.isOperatingReefer, hubSat.temperatureUnits, hubSat.minTemperature, hubSat.maxTemperature, hubSat.imsTransportCode, hubSat.typeOfPackages, hubSat.marksNumbers, hubSat.sealNumber, hubSat.volume, hubSat.volumeUnits, hubSat.feederVoyageNumber, hubSat.fumigationMaterialImoClass, hubSat.fumigationMaterialUnNumber, hubSat.dangerousCargoResidueImoClass, hubSat.dangerousCargoResidueUnNumber, hubSat.kipisSendFlag, hubSat.cargoBackOverDimension, hubSat.cargoForeOverDimension, hubSat.cargoHightOverDimension, hubSat.cargoLeftOverDimension, hubSat.cargoLengthOverDimension, hubSat.cargoRightOverDimension, hubSat.cargoWidthOverDimension, hubSat.precarriageVessel, hubSat.packageCount, hubSat.dryPortCode, hubSat.eta, hubSat.sailingDate, hubSat.srcSystemId, satStatus.status as satStatus, satStatus.validFrom from sat.satBookingCargoStatus satStatus inner join (select distinct hub.dwhIdHubBookingCargo, hub.bookingNumber, hub.cargoLineNr, hub.accessCompanyId, sat.agencyHarmonizedCode, sat.cargoWeight, sat.tareWeight, sat.containerNr, sat.containerTypeCode, sat.containerTypeName, sat.imoClass, sat.partLoadFlag, sat.unNumber, sat.cargoDescr, sat.atmosphereControl, sat.automaticTemperatureFlag, sat.automaticTemperatureValue, sat.coldTreatment, sat.dehumidificationFlag, sat.dehumidificationValue, sat.bulbMode, sat.manualTemperatureFlag, sat.manualTemperatureValue, sat.isOperatingReefer, sat.temperatureUnits, sat.minTemperature, sat.maxTemperature, sat.imsTransportCode, sat.typeOfPackages, sat.marksNumbers, sat.sealNumber, sat.volume, sat.volumeUnits, sat.feederVoyageNumber, sat.fumigationMaterialImoClass, sat.fumigationMaterialUnNumber, sat.dangerousCargoResidueImoClass, sat.dangerousCargoResidueUnNumber, sat.kipisSendFlag, sat.cargoBackOverDimension, sat.cargoForeOverDimension, sat.cargoHightOverDimension, sat.cargoLeftOverDimension, sat.cargoLengthOverDimension, sat.cargoRightOverDimension, sat.cargoWidthOverDimension, sat.precarriageVessel,sat. packageCount, sat.dryPortCode, sat.eta, sat.sailingDate, hub.srcSystemId from sat.satBookingCargo sat inner join (select dwhIdHubBookingCargo, bookingNumber, cargoLineNr, accessCompanyId,  srcSystemId  from hub.hubBookingCargo) hub on hub.dwhIdHubBookingCargo = sat.dwhIdHubBookingCargo) hubSat on hubSat.dwhIdHubBookingCargo = satStatus.dwhIdHubBookingCargo) hubSatStatus on hubSatStatus.dwhIdHubBookingCargo = satStatus.dwhIdHubBookingCargo) q where RowNumber =
bookingCargo.dataInDM.RowByKeys = select dwhIdHubBookingCargo, dwhIdHubBooking, bookingNumber, cargoLineNr, agencyHarmonizedCode, cargoWeight, tareWeight,containerNr, containerTypeCode, containerTypeName, imoClass, partLoadFlag, unNumber, cargoDescr, atmosphereControl, automaticTemperatureFlag, automaticTemperatureValue, coldTreatment, dehumidificationFlag, dehumidificationValue, bulbMode, manualTemperatureFlag, manualTemperatureValue, isOperatingReefer, temperatureUnits, minTemperature, maxTemperature, imsTransportCode, typeOfPackages, marksNumbers, sealNumber, volume, volumeUnits, feederVoyageNumber, fumigationMaterialImoClass, fumigationMaterialUnNumber, dangerousCargoResidueImoClass, dangerousCargoResidueUnNumber, kipisSendFlag, cargoBackOverDimension, cargoForeOverDimension, cargoHightOverDimension, cargoLeftOverDimension, cargoLengthOverDimension, cargoRightOverDimension, cargoWidthOverDimension, precarriageVessel, packageCount, dryPortCode, eta, sailingDate, accessCompanyId, srcSystemId, dmStatus as status, validFrom, validTo from  dim.dimBookingCargo


booking.dwh.CountRows = select count (*) c from (select distinct dwhIdHubBooking, validFrom from sat.satBooking  union select distinct dwhIdHubBooking, validFrom from sat.satBookingStatus union select distinct dwhIdHubBooking, validFrom from sat.satLnkBookingPPCCEE union select distinct dwhIdHubBooking, validFrom from sat.satLnkBookingCrossBookingType union select distinct dwhIdHubBooking, validFrom from sat.satLnkBookingImportExport union select distinct dwhIdHubBooking, validFrom from sat.satLnkBookingCustomers union select distinct dwhIdHubBooking, validFrom from sat.satLnkBookingLocations union  select distinct dwhIdHubBooking, validFrom from sat.satBookingNonManifestedHaulage union select distinct dwhIdHubBooking, validFrom from sat.satLnkBookingControllingOffice union select distinct dwhIdHubBooking, validFrom from sat.satBookingCustomers union select distinct dwhIdHubBooking, validFrom from sat.satLnkBookingFileLiner union select distinct dwhIdHubBooking2, validFrom from sat.satLnkBookingBooking) q
booking.dim.CountRows = select COUNT (*) c from (select dwhIdHubBooking, validFrom  from dim.dimBooking)q
booking.dataInDV.commonPart = FROM (SELECT  dataLnk35.*, satLnk36.carriageMode as nmhCarriageMode , satLnk36.dryPortName as nmhDryPortName, satLnk36.plrName as nmhPlrName, satLnk36.podName as nmhPodName,   satLnk36.PldZipCode as nmhPldZipCode, satLnk36.PlrZipCode as nmhPlrZipCode from sat.satBookingNonManifestedHaulage satLnk36 right join (select dataLnk34.*, satLnk35.shipperCode, satLnk35.bookPartyCode, satLnk35.careOfForwarderCode, satLnk35.careOfShipperCode, satLnk35.contractHolderCode,  satLnk35.invoicingCompanyElsewhereCode, satLnk35.forwarderCode, satLnk35.consigneeCode, satLnk35.namedAccountCode, satLnk35.notifyCode, satLnk35.notify2Code, satLnk35.notify3Code, satLnk35.s_shipperCode as sshipperCode, satLnk35.s_bookPartyCode as sbookPartyCode, satLnk35.s_careOfForwarderCode as scareOfForwarderCode, satLnk35.s_careOfShipperCode as scareOfShipperCode, satLnk35.s_contractHolderCode as scontractHolderCode, satLnk35.s_invoicingCompanyElsewhereCode as sinvoicingCompanyElsewhereCode, satLnk35.s_forwarderCode as sforwarderCode, satLnk35.s_consigneeCode as sconsigneeCode, satLnk35.s_namedAccountCode as snamedAccountCode, satLnk35.s_notifyCode as snotifyCode, satLnk35.s_notify2Code as snotify2Code, satLnk35.s_notify3Code as snotify3Code from sat.satBookingCustomers satLnk35 right join (select dataLnk33.*, satLnk34.dwhIdHubControllingOffice from sat.satLnkBookingControllingOffice satLnk34 right join (select dataLnk32.*, satLnk33.dwhIdHubLocations as dwhIdHubLocationsPLD from sat.satLnkBookingLocations satLnk33 right join (select dataLnk31.*, NULL as dwhIdHubBookingCrossBooking from (select dataLnk30.*, satLnk31.dwhIdHubCompany from lin.lnkBookingCompany satLnk31 right join (select dataLnk29.*, satLnk30.dwhIdHubLocations as dwhIdHubLocationsTRANS5 from sat.satLnkBookingLocations satLnk30 right join (select dataLnk28.*, satLnk29.dwhIdHubLocations as dwhIdHubLocationsTRANS4 from sat.satLnkBookingLocations satLnk29 right join (select dataLnk27.*, satLnk28.dwhIdHubLocations as dwhIdHubLocationsTRANS3 from sat.satLnkBookingLocations satLnk28 right join (select dataLnk26.*, satLnk27.dwhIdHubLocations as dwhIdHubLocationsTRANS2 from sat.satLnkBookingLocations satLnk27 right join (select dataLnk25.*, satLnk26.dwhIdHubLocations as dwhIdHubLocationsTRANS from sat.satLnkBookingLocations satLnk26 right join (select dataLnk24.*,  satLnk25.dwhIdHubLocations as dwhIdHubLocationsPORTFEED from sat.satLnkBookingLocations satLnk25 right join (select dataLnk23.*, satLnk24.dwhIdHubLocations as dwhIdHubLocationsPORTSAIL from sat.satLnkBookingLocations satLnk24 right join (select dataLnk22.*, satLnk23.dwhIdHubLocations as dwhIdHubLocationsDRYPORT from sat.satLnkBookingLocations satLnk23 right join (select dataLnk21.*, satLnk22.dwhIdHubLocations as dwhIdHubLocationsPAYABLEATIMS from sat.satLnkBookingLocations satLnk22 right join (select dataLnk20.*, satLnk21.dwhIdHubLocations as dwhIdHubLocationsPAYABLEAT from sat.satLnkBookingLocations satLnk21 right join (select dataLnk19.*, satLnk20.dwhIdHubLocations as dwhIdHubLocationsPLR from sat.satLnkBookingLocations satLnk20 right join (select dataLnk18.*, satLnk19.dwhIdHubLocations as dwhIdHubLocationsPOD from sat.satLnkBookingLocations satLnk19 right join (select dataLnk17.*, satLnk18.dwhIdHubLocations as dwhIdHubLocationsPOL from sat.satLnkBookingLocations satLnk18 right join (select dataLnk16.*, satLnk17.dwhIdHubFileLiner from sat.satLnkBookingFileLiner satLnk17 right join (select dataLnk15.*, satLnk16.dwhIdHubCustomers as dwhIdHubCustomersFreightPayer from sat.satLnkBookingCustomers satLnk16 right join (select dataLnk14.*, satLnk15.dwhIdHubCustomers as dwhIdHubCustomersStatCustomer from sat.satLnkBookingCustomers satLnk15 right join (select dataLnk13.*,satLnk14.dwhIdHubCustomers as dwhIdHubCustomersCareOfShipper from sat.satLnkBookingCustomers satLnk14 right join (select dataLnk12.*, satLnk13.dwhIdHubCustomers as dwhIdHubCustomersInvComElsewhere from sat.satLnkBookingCustomers satLnk13 right join (select dataLnk11.*, satLnk12.dwhIdHubCustomers as dwhIdHubCustomersNotify3 from sat.satLnkBookingCustomers satLnk12 right join (select dataLnk10.*, satLnk11.dwhIdHubCustomers as dwhIdHubCustomersNotify2 from sat.satLnkBookingCustomers satLnk11 right join (select dataLnk9.*, satLnk10.dwhIdHubCustomers as dwhIdHubCustomersNotify from sat.satLnkBookingCustomers satLnk10 right join (select dataLnk8.*, satLnk9.dwhIdHubCustomers as dwhIdHubCustomersCareOfForwarder from sat.satLnkBookingCustomers satLnk9 right join (select dataLnk7.*, satLnk8.dwhIdHubCustomers as dwhIdHubCustomersContractHolder from sat.satLnkBookingCustomers satLnk8 right join (select dataLnk6.*, satLnk7.dwhIdHubCustomers as dwhIdHubCustomersBookingParty from sat.satLnkBookingCustomers satLnk7 right join (select dataLnk5.*, satLnk6.dwhIdHubCustomers as dwhIdHubCustomersConsignee from sat.satLnkBookingCustomers satLnk6 right join (  select dataLnk4.*, satLnk5.dwhIdHubCustomers as dwhIdHubCustomersShipper  from sat.satLnkBookingCustomers satLnk5 right join (select dataLnk3.*, satLnk4.dwhIdHubCustomers as dwhIdHubCustomersForwarder from sat.satLnkBookingCustomers satLnk4 right join (select dataLnk2.*, satLnk3.dwhIdHubImportExport from sat.satLnkBookingImportExport satLnk3 RIGHT join (select dataLnk1.*, satLnk2.dwhIdHubCrossBookingType from sat.satLnkBookingCrossBookingType satLnk2 RIGHT join (  select hubSatStatus.*, satLnk1.dwhIdHubPPCCEE from sat.satLnkBookingPPCCEE satLnk1 RIGHT join (select hubSat.*, satStatus.status as status  from sat.satBookingStatus satStatus inner join (select distinct sat.validFrom, hub.*, sat.oceanTrade as ovTradeNumber, sat.oceanTrade as oceanTrade, sat.gvaTrade as ovTradeName, sat.gvaTrade as gvaTrade, sat.serviceCode,sat.polName, sat.polDate, sat.polCode, sat.dischTerminalDepotCode, sat.podName, sat.podDate, sat.podCode, sat.creationDate, sat.blDate, sat.manifestType, sat.feederDate, sat.quotationRefNr, sat.blNumber, sat.specialRefNr,sat.bookingStatus, sat.branch, sat.placeOfDelivery, sat.placeOfReceipt, sat.pldHaulageAtDestination, sat.pldHaulageAtOrigin, sat.pldSublocationCode, sat.plrSublocationCode, sat.pldZipCode, sat.plrZipCode, sat.inttraReferenceNr, sat.controlOffice, sat.controlCompany, sat.contractType, sat.directFlag, sat.payableAt, sat.pldDate, sat.plrDate, sat.createdBy, sat.payableAtIMS, sat.originalCrossBookNr, sat.europeanCargoStatus, sat.shipperReference, sat.depot, sat.terminal, sat.depotReference, sat.terminalReference, sat.bookingPosition, sat.importExportCode, sat.customerBookingParty, sat.blGroup from sat.satBooking sat inner join (select dwhIdHubBooking, bookingNumber as bookingNr, accessCompanyId,  srcSystemId  from hub.hubBooking) hub on hub.dwhIdHubBooking = sat.dwhIdHubBooking) hubSat on hubSat.dwhIdHubBooking = satStatus.dwhIdHubBooking) hubSatStatus on hubSatStatus.dwhIdHubBooking = satLnk1.dwhIdHubBooking) dataLnk1 on dataLnk1.dwhIdHubBooking = satLnk2.dwhIdHubBooking) dataLnk2 on dataLnk2.dwhIdHubBooking = satLnk3.dwhIdHubBooking) dataLnk3 on dataLnk3.dwhIdHubBooking = satLnk4.dwhIdHubBooking and satLnk4.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='Forwarder')) dataLnk4 on dataLnk4.dwhIdHubBooking = satLnk5.dwhIdHubBooking and satLnk5.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='Shipper')) dataLnk5 on dataLnk5.dwhIdHubBooking = satLnk6.dwhIdHubBooking and satLnk6.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='Consignee')) dataLnk6 on dataLnk6.dwhIdHubBooking = satLnk7.dwhIdHubBooking and satLnk7.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='Booking party')) dataLnk7 on dataLnk7.dwhIdHubBooking = satLnk8.dwhIdHubBooking and satLnk8.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='Contract holder')) dataLnk8 on dataLnk8.dwhIdHubBooking = satLnk9.dwhIdHubBooking and satLnk9.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='Care of forwarder')) dataLnk9 on dataLnk9.dwhIdHubBooking = satLnk10.dwhIdHubBooking and satLnk10.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='Notify')) dataLnk10 on dataLnk10.dwhIdHubBooking = satLnk11.dwhIdHubBooking and satLnk11.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='Notify2')) dataLnk11 on dataLnk11.dwhIdHubBooking = satLnk12.dwhIdHubBooking and satLnk12.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='Notify3')) dataLnk12 on dataLnk12.dwhIdHubBooking = satLnk13.dwhIdHubBooking and satLnk13.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='Invoicing company elsewhere')) dataLnk13 on dataLnk13.dwhIdHubBooking = satLnk14.dwhIdHubBooking and satLnk14.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='Care of shipper')) dataLnk14 on dataLnk14.dwhIdHubBooking = satLnk15.dwhIdHubBooking and satLnk15.dwhIdHubCustomerParty= (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='StatCustomer')) dataLnk15 on dataLnk15.dwhIdHubBooking = satLnk16.dwhIdHubBooking and satLnk16.dwhIdHubCustomerParty = (select dwhIdHubCustomerParty from hub.hubCustomerParty where customerPartyName='FreightPayer')) dataLnk16 on dataLnk16.dwhIdHubBooking = satLnk17.dwhIdHubBooking) dataLnk17 on dataLnk17.dwhIdHubBooking = satLnk18.dwhIdHubBooking and satLnk18.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='POL')  ) dataLnk18 on dataLnk18.dwhIdHubBooking = satLnk19.dwhIdHubBooking and satLnk19.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='POD')) dataLnk19 on dataLnk19.dwhIdHubBooking = satLnk20.dwhIdHubBooking and satLnk20.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='PLR')) dataLnk20 on dataLnk20.dwhIdHubBooking = satLnk21.dwhIdHubBooking and satLnk21.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='PAYBLE_AT')) dataLnk21 on dataLnk21.dwhIdHubBooking = satLnk22.dwhIdHubBooking and satLnk22.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='PAYABLE_AT_IMS')) dataLnk22 on dataLnk22.dwhIdHubBooking = satLnk23.dwhIdHubBooking and satLnk23.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='DRY_PORT')) dataLnk23 on dataLnk23.dwhIdHubBooking = satLnk24.dwhIdHubBooking and satLnk24.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='PORT_SAIL')) dataLnk24 on dataLnk24.dwhIdHubBooking = satLnk25.dwhIdHubBooking and satLnk25.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='PORT_FEED')) dataLnk25 on dataLnk25.dwhIdHubBooking = satLnk26.dwhIdHubBooking and satLnk26.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='PORT_TRANS')) dataLnk26 on dataLnk26.dwhIdHubBooking = satLnk27.dwhIdHubBooking and satLnk27.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='PORT_TRANS2')) dataLnk27 on dataLnk27.dwhIdHubBooking = satLnk28.dwhIdHubBooking and satLnk28.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='PORT_TRANS3')) dataLnk28 on dataLnk28.dwhIdHubBooking = satLnk29.dwhIdHubBooking and satLnk29.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='PORT_TRANS4')) dataLnk29 on dataLnk29.dwhIdHubBooking = satLnk30.dwhIdHubBooking and satLnk30.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='PORT_TRANS5')) dataLnk30 on dataLnk30.dwhIdHubBooking = satLnk31.dwhIdHubBooking) dataLnk31) dataLnk32 on dataLnk32.dwhIdHubBooking = satLnk33.dwhIdHubBooking and satLnk33.dwhIdHubLocationRole = (select dwhIdHubLocationRole from hub.HubLocationRole where locationRoleName='PLD')) dataLnk33 on dataLnk33.dwhIdHubBooking = satLnk34.dwhIdHubBooking) dataLnk34 on dataLnk34.dwhIdHubBooking = satLnk35.dwhIdHubBooking) dataLnk35 on dataLnk35.dwhIdHubBooking = satLnk36.dwhIdHubBooking)w
booking.dataInDM.RowByKeys = select dwhIdHubBooking, dwhIdHubPPCCEE, dwhIdHubCrossBookingType, dwhIdHubImportExport, dwhIdHubCustomersForwarder, dwhIdHubCustomersShipper, dwhIdHubCustomersConsignee, dwhIdHubCustomersBookingParty, dwhIdHubCustomersContractHolder, dwhIdHubCustomersCareOfForwarder, dwhIdHubCustomersNotify , dwhIdHubCustomersNotify2, dwhIdHubCustomersNotify3, dwhIdHubCustomersInvComElsewhere, dwhIdHubCustomersCareOfShipper, dwhIdHubCustomersStatCustomer, dwhIdHubCustomersFreightPayer, dwhIdHubFileLiner, dwhIdHubLocationsPOL, dwhIdHubLocationsPOD, dwhIdHubLocationsPLR, dwhIdHubLocationsPAYABLEAT, dwhIdHubLocationsPAYABLEATIMS, dwhIdHubLocationsDRYPORT, dwhIdHubLocationsPORTSAIL, dwhIdHubLocationsPORTFEED, dwhIdHubLocationsTRANS, dwhIdHubLocationsTRANS2, dwhIdHubLocationsTRANS3, dwhIdHubLocationsTRANS4, dwhIdHubLocationsTRANS5, dwhIdHubCompany, dwhIdHubBookingCrossBooking, dwhIdHubLocationsPLD, dwhIdHubControllingOffice, ovTradeNumber, ovTradeName, bookingNr, serviceCode, polName, polDate, polCode, dischTerminalDepotCode, podName, podDate, podCode, creationDate, oceanTrade, blDate, manifestType, feederDate, quotationRefNr, blNumber, gvaTrade, specialRefNr, bookingStatus, branch, placeOfDelivery, placeOfReceipt, pldHaulageAtDestination, pldHaulageAtOrigin, pldSublocationCode, plrSublocationCode, pldZipCode, plrZipCode, inttraReferenceNr, controlOffice, controlCompany, contractType, directFlag, payableAt, pldDate, plrDate, createdBy, payableAtIMS, originalCrossBookNr, europeanCargoStatus, shipperReference, depot, terminal, depotReference, terminalReference, bookingPosition, importExportCode, customerBookingParty, blGroup, shipperCode, bookPartyCode, careOfForwarderCode, careOfShipperCode, contractHolderCode, invoicingCompanyElsewhereCode, forwarderCode, consigneeCode, namedAccountCode, notifyCode, notify2Code, notify3Code, sshipperCode, sbookPartyCode, scareOfForwarderCode, scareOfShipperCode, scontractHolderCode, sinvoicingCompanyElsewhereCode, sforwarderCode, sconsigneeCode, snamedAccountCode, snotifyCode, snotify2Code, snotify3Code, nmhCarriageMode , nmhDryPortName, nmhPlrName, nmhPodName, nmhPldZipCode, nmhPlrZipCode, accessCompanyId, srcSystemId, dmStatus as status , validFrom from dim.dimBooking

bookingOceanVessel.dwh.CountRows = select count (*) c from (select distinct dwhIdHubBookingOceanVessel, validFrom from sat.satBookingOceanVessel union select distinct dwhIdHubBookingOceanVessel, validFrom from sat.satBookingOceanVesselStatus union select distinct dwhIdHubBookingOceanVessel, validFrom from sat.satLnkBookingBookingOceanVessel union select distinct dwhIdHubBookingOceanVessel, validFrom from sat.satLnkBookingOceanVesselOceanVesselStatus union select distinct dwhIdHubBookingOceanVessel, validFrom from sat.satLnkBookingOceanVesselExportVessels) q
bookingOceanVessel.dim.CountRows = select COUNT (*) c from (select dwhIdHubBookingOceanVessel, validFrom  from dim.dimBookingOceanVessel)q
bookingOceanVessel.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by hubSatlnk2.dwhIdHubBookingOceanVessel) AS RowNumber,  hubSatlnk2.dwhIdHubBookingOceanVessel, hubSatlnk2.dwhIdHubBooking, hubSatlnk2.dwhIdHubOceanVesselStatus, satLnk3.dwhIdHubExportVessels, hubSatlnk2.bookingNumber,  hubSatlnk2.bookVesselId, hubSatlnk2.blockStowCode, hubSatlnk2.createdBy, hubSatlnk2.creationDate, hubSatlnk2.accessCompanyId,  hubSatlnk2.srcSystemId, hubSatlnk2.status, hubSatlnk2.validFrom  from sat.satLnkBookingOceanVesselExportVessels satLnk3 full join ( select hubSatlnk1.dwhIdHubBookingOceanVessel, hubSatlnk1.dwhIdHubBooking, satLnk2.dwhIdHubOceanVesselStatus, hubSatlnk1.bookingNumber,  hubSatlnk1.bookVesselId, hubSatlnk1.accessCompanyId,  hubSatlnk1.blockStowCode, hubSatlnk1.createdBy, hubSatlnk1.creationDate, hubSatlnk1.srcSystemId, hubSatlnk1.status, hubSatlnk1.validFrom from sat.satLnkBookingOceanVesselOceanVesselStatus satLnk2 full join (select hubSatStatus.dwhIdHubBookingOceanVessel, satLnk1.dwhIdHubBooking, hubSatStatus.bookingNumber, hubSatStatus.bookVesselId, hubSatStatus.accessCompanyId, hubSatStatus.blockStowCode, hubSatStatus.createdBy, hubSatStatus.creationDate, hubSatStatus.srcSystemId, hubSatStatus.status, hubSatStatus.validFrom from sat.satLnkBookingBookingOceanVessel satLnk1 full join (select hubSat.dwhIdHubBookingOceanVessel, hubSat.bookingNumber, hubSat.bookVesselId, hubSat.accessCompanyId, hubSat.blockStowCode, hubSat.createdBy, hubSat.creationDate, hubSat.srcSystemId, satStatus.status, satStatus.validFrom from sat.satBookingOceanVesselStatus satStatus inner join (select distinct hub.dwhIdHubBookingOceanVessel, hub.bookingNumber, hub.bookVesselId, hub.accessCompanyId, sat.blockStowCode, sat.createdBy, sat.creationDate, hub.srcSystemId from sat.satBookingOceanVessel sat inner join (select dwhIdHubBookingOceanVessel, bookingNumber, bookVesselId, accessCompanyId,  srcSystemId  from hub.hubBookingOceanVessel) hub on hub.dwhIdHubBookingOceanVessel = sat.dwhIdHubBookingOceanVessel) hubSat on hubSat.dwhIdHubBookingOceanVessel = satStatus.dwhIdHubBookingOceanVessel) hubSatStatus on hubSatStatus.dwhIdHubBookingOceanVessel = satLnk1.dwhIdHubBookingOceanVessel) hubSatlnk1 on hubSatlnk1.dwhIdHubBookingOceanVessel = satLnk2.dwhIdHubBookingOceanVessel) hubSatlnk2 on hubSatlnk2.dwhIdHubBookingOceanVessel = satLnk3.dwhIdHubBookingOceanVessel) q where RowNumber =
bookingOceanVessel.dataInDM.RowByKeys = select dwhIdHubBookingOceanVessel, dwhIdHubBooking, dwhIdHubOceanVesselStatus, dwhIdHubExportVessels, bookingNumber, bookVesselId, blockStowCode, createdBy, creationDate, accessCompanyId, srcSystemId, dmStatus as status, validFrom from  dim.dimBookingOceanVessel

containerType.dim.CountRows = select COUNT (*) c from (select dwhIdHubContainerType, validFrom  from dim.dimContainerType)q
containerType.dataInDV.commonPart = FROM  (SELECT case when hub2_1.dwhIdHubContainerTypeSpecEquip is not null then 1 else 0 end seIsSpecial, hub2_1.dwhIdHubContainerType, hub2_1.dwhIdHubContainerTypeSpecEquip, hub2_1.feet,  hub2_1.typeCode, hub2_1.typeName, hub2_1.size, hub2_1.shipperOwned, hub2_1.isReefer, hub2_1.containerTypeCode, hub2_1.contFeet as seContFeet, hub2_1.contSize as seContSize,   hub2_1.contType as seContType, hub2_1.contTypeName as seContTypeName, sat2.masterContType as seMasterContType, sat2.isTank as seIsTank, sat2.isSpecialWithRef as seIsSpecialWithRef, sat2.isSpecialWoRef as seIsSpecialWoRef, sat2.isFlatrack as seIsFlatrack, sat2.isPlatform as seIsPlatform, sat2.isOpentop as seIsOpentop,hub2_1.status, hub2_1.validFrom, hub2_1.accessCompanyId, hub2_1.srcSystemId from sat.satContainerTypeSpecEquip sat2 right join (select allcontType2.*,  hub2.contFeet, hub2.contSize, hub2.contType,  hub2.contTypeName from hub.hubContainerTypeSpecEquip hub2 right join (select allContType.*, satLnk.dwhIdHubContainerTypeSpecEquip from sat.satLnkContainerTypeContainerTypeSpecEquip satLnk right join (select  DISTINCT hub1sat1.*, satStatus.status from sat.satContainerTypeStatus satStatus inner join (SELECT   sat1.validFrom, hub1.*, sat1.feet, sat1.typeCode, sat1.typeName, sat1.size, replace(upper(sat1.shipperOwned), 'J', 'Y') as shipperOwned, replace(upper(sat1.isReefer), 'J', 'Y') as isReefer from sat.satContainerType sat1 inner join (select dwhIdHubContainerType, containerTypeCode, accessCompanyId, srcSystemId from hub.hubContainerType) hub1 on   hub1.dwhIdHubContainerType =  sat1.dwhIdHubContainerType) hub1sat1 on hub1sat1.dwhIdHubContainerType= satStatus.dwhIdHubContainerType) allContType on allContType.dwhIdHubContainerType= satLnk.dwhIdHubContainerType)allcontType2 on allcontType2.dwhIdHubContainerTypeSpecEquip = hub2.dwhIdHubContainerTypeSpecEquip) hub2_1 on  hub2_1.dwhIdHubContainerTypeSpecEquip =  sat2.dwhIdHubContainerTypeSpecEquip UNION SELECT case when hub2_1.dwhIdHubContainerTypeSpecEquip is not null then 1 else 0 end seIsSpecial,  hub2_1.dwhIdHubContainerType, hub2_1.dwhIdHubContainerTypeSpecEquip, hub2_1.feet,  hub2_1.typeCode, hub2_1.typeName, hub2_1.size, hub2_1.shipperOwned, hub2_1.isReefer, hub2_1.containerTypeCode, hub2_1.contFeet as seContFeet, hub2_1.contSize as seContSize,   hub2_1.contType as seContType, hub2_1.contTypeName as seContTypeName, sat2.masterContType as seMasterContType, sat2.isTank as seIsTank, sat2.isSpecialWithRef as seIsSpecialWithRef, sat2.isSpecialWoRef as seIsSpecialWoRef, sat2.isFlatrack as seIsFlatrack, sat2.isPlatform as seIsPlatform, sat2.isOpentop as seIsOpentop,hub2_1.status, hub2_1.validFrom, hub2_1.accessCompanyId, hub2_1.srcSystemId from sat.satContainerTypeSpecEquip sat2  right join (select distinct allcontType2.*, hub2.contFeet, hub2.contSize, hub2.contType,  hub2.contTypeName from hub.hubContainerTypeSpecEquip hub2 right join (select allContType.*, satLnk.dwhIdHubContainerTypeSpecEquip from sat.satLnkContainerTypeContainerTypeSpecEquip satLnk right join (SELECT DISTINCT satStatus.validFrom, hub1sat1.*, satStatus.status from sat.satContainerTypeStatus satStatus inner join (select hub1.*, sat1.feet, sat1.typeCode, sat1.typeName, sat1.size, replace(upper(sat1.shipperOwned), 'J', 'Y') as shipperOwned,  replace(upper(sat1.isReefer), 'J', 'Y') as isReefer from sat.satContainerType sat1 inner join (select dwhIdHubContainerType, containerTypeCode, accessCompanyId, srcSystemId from hub.hubContainerType) hub1 on   hub1.dwhIdHubContainerType =  sat1.dwhIdHubContainerType) hub1sat1 on hub1sat1.dwhIdHubContainerType= satStatus.dwhIdHubContainerType) allContType on allContType.dwhIdHubContainerType= satLnk.dwhIdHubContainerType)allcontType2 on allcontType2.dwhIdHubContainerTypeSpecEquip = hub2.dwhIdHubContainerTypeSpecEquip) hub2_1 on   hub2_1.dwhIdHubContainerTypeSpecEquip =  sat2.dwhIdHubContainerTypeSpecEquip UNION SELECT * FROM (SELECT case when hub2_1.dwhIdHubContainerTypeSpecEquip is not null then 1 else 0 end seIsSpecial,  hub2_1.dwhIdHubContainerType, hub2_1.dwhIdHubContainerTypeSpecEquip, hub2_1.feet,  hub2_1.typeCode, hub2_1.typeName, hub2_1.size, hub2_1.shipperOwned, hub2_1.isReefer, hub2_1.containerTypeCode, hub2_1.contFeet as seContFeet, hub2_1.contSize as seContSize,   hub2_1.contType as seContType, hub2_1.contTypeName as seContTypeName, sat2.masterContType as seMasterContType, sat2.isTank as seIsTank, sat2.isSpecialWithRef as seIsSpecialWithRef, sat2.isSpecialWoRef as seIsSpecialWoRef, sat2.isFlatrack as seIsFlatrack, sat2.isPlatform as seIsPlatform, sat2.isOpentop as seIsOpentop,hub2_1.status, hub2_1.validFrom, hub2_1.accessCompanyId, hub2_1.srcSystemId from sat.satContainerTypeSpecEquip sat2 right join (select distinct allcontType2.*, hub2.contFeet, hub2.contSize, hub2.contType,  hub2.contTypeName from hub.hubContainerTypeSpecEquip hub2 right join (select  satLnk.validFrom, allContType.*, satLnk.dwhIdHubContainerTypeSpecEquip from sat.satLnkContainerTypeContainerTypeSpecEquip satLnk right join (select hub1sat1.*, satStatus.status from sat.satContainerTypeStatus satStatus inner join (select hub1.*, sat1.feet, sat1.typeCode, sat1.typeName, sat1.size, replace(upper(sat1.shipperOwned), 'J', 'Y') as shipperOwned, replace(upper(sat1.isReefer), 'J', 'Y') as isReefer from sat.satContainerType sat1 inner join (select dwhIdHubContainerType, containerTypeCode, accessCompanyId, srcSystemId from hub.hubContainerType) hub1 on   hub1.dwhIdHubContainerType =  sat1.dwhIdHubContainerType) hub1sat1 on hub1sat1.dwhIdHubContainerType= satStatus.dwhIdHubContainerType) allContType on allContType.dwhIdHubContainerType= satLnk.dwhIdHubContainerType)allcontType2 on allcontType2.dwhIdHubContainerTypeSpecEquip = hub2.dwhIdHubContainerTypeSpecEquip) hub2_1 on hub2_1.dwhIdHubContainerTypeSpecEquip =  sat2.dwhIdHubContainerTypeSpecEquip)a WHERE dwhIdHubContainerTypeSpecEquip IS NOT null  UNION SELECT * FROM (SELECT case when hub2_1.dwhIdHubContainerTypeSpecEquip is not null then 1 else 0 end seIsSpecial,  hub2_1.dwhIdHubContainerType, hub2_1.dwhIdHubContainerTypeSpecEquip, hub2_1.feet,  hub2_1.typeCode, hub2_1.typeName, hub2_1.size, hub2_1.shipperOwned, hub2_1.isReefer, hub2_1.containerTypeCode, hub2_1.contFeet as seContFeet, hub2_1.contSize as seContSize,   hub2_1.contType as seContType,hub2_1.contTypeName as seContTypeName, sat2.masterContType as seMasterContType, sat2.isTank as seIsTank, sat2.isSpecialWithRef as seIsSpecialWithRef, sat2.isSpecialWoRef as seIsSpecialWoRef, sat2.isFlatrack as seIsFlatrack, sat2.isPlatform as seIsPlatform, sat2.isOpentop as seIsOpentop,hub2_1.status, sat2.validFrom, hub2_1.accessCompanyId, hub2_1.srcSystemId from sat.satContainerTypeSpecEquip sat2 right join (select distinct allcontType2.*, hub2.contFeet, hub2.contSize, hub2.contType,  hub2.contTypeName from hub.hubContainerTypeSpecEquip hub2 right join (select allContType.*, satLnk.dwhIdHubContainerTypeSpecEquip from sat.satLnkContainerTypeContainerTypeSpecEquip satLnk right join (select hub1sat1.*, satStatus.status from sat.satContainerTypeStatus satStatus inner join (select hub1.*, sat1.feet, sat1.typeCode, sat1.typeName, sat1.size, replace(upper(sat1.shipperOwned), 'J', 'Y') as shipperOwned,replace(upper(sat1.isReefer), 'J', 'Y') as isReefer from sat.satContainerType sat1 inner join (select dwhIdHubContainerType, containerTypeCode,  accessCompanyId, srcSystemId from hub.hubContainerType) hub1 on   hub1.dwhIdHubContainerType =  sat1.dwhIdHubContainerType) hub1sat1 on hub1sat1.dwhIdHubContainerType= satStatus.dwhIdHubContainerType) allContType on allContType.dwhIdHubContainerType= satLnk.dwhIdHubContainerType)allcontType2 on allcontType2.dwhIdHubContainerTypeSpecEquip = hub2.dwhIdHubContainerTypeSpecEquip) hub2_1 on hub2_1.dwhIdHubContainerTypeSpecEquip =  sat2.dwhIdHubContainerTypeSpecEquip)a WHERE dwhIdHubContainerTypeSpecEquip IS NOT null)w
containerType.dataInDM.RowByKeys = select dwhIdHubContainerType, dwhIdHubContainerTypeSpecEquip, containerTypeCode, feet,typeCode, typeName, size, shipperOwned, isReefer, seIsSpecial, seContFeet, seContSize, seContType, seContTypeName, seMasterContType, seIsTank, seIsSpecialWithRef, seIsSpecialWoRef, seIsFlatrack, seIsPlatform, seIsOpentop, accessCompanyId, srcSystemId, dmStatus as status, validFrom  from  dim.dimContainerType

transshipmentPorts.dwh.CountRows = SELECT count (1) c FROM (SELECT  locationCode, validFromBusiness, validToBusiness, MIN(portName) AS portName FROM (SELECT distinct locationCode, validFromBusiness, validToBusiness, portName FROM  DataVaultTest.fct.fctLoopSearch WHERE isTransshipmentPort='Y' AND deleteDate IS NULL)s GROUP BY locationCode, validFromBusiness, validToBusiness)q
transshipmentPorts.dim.CountRows = select COUNT (*) c from (select locationCode, validFromBusiness, validToBusiness  from dim.dimTransshipmentPorts)q
transshipmentPorts.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by locationCode, validFromBusiness, validToBusiness) AS RowNumber,locationCode, validFromBusiness, validToBusiness, MIN(portName) AS portName FROM (SELECT distinct locationCode, validFromBusiness, validToBusiness, portName FROM  DataVaultTest.fct.fctLoopSearch WHERE isTransshipmentPort='Y' AND deleteDate IS NULL)s GROUP BY locationCode, validFromBusiness, validToBusiness) q where RowNumber =
transshipmentPorts.dataInDM.RowByKeys = select locationCode, validFromBusiness, validToBusiness,portName  from  dim.dimTransshipmentPorts

bookingManifest.dim.CountRows = select COUNT (*) c from (select dwhIdHubBookingManifest, validFrom  from dim.dimBookingManifest)q
bookingManifest.dataInDV.commonPart = FROM (SELECT hbsL1.*, satLnk2.dwhIdHubBooking as dwhIdHubBookingShadowCopy FROM sat.satLnkBookingBookingManifestShadowCopy satLnk2 right JOIN (SELECT  hubSatSatStatus.*, satLnk1.dwhIdHubBooking as dwhIdHubBookingWorkingCopy FROM sat.satLnkBookingBookingManifest satLnk1 right JOIN (SELECT hubSat.*, satStatus.status AS dmStatus FROM sat.satBookingManifestStatus satStatus INNER JOIN (SELECT sat.validFrom, hub.*, sat.correctorReason, sat.correctorNr, sat.correctorType, sat.manifestType, sat.createdBy, sat.creationDate, sat.rolloverServiceCode, sat.rolloverFileLiner, sat.isSplit, sat.manifestFileId, sat.status from sat.satBookingManifest sat inner join (SELECT dwhIdHubBookingManifest, bookMftId, accessCompanyId,  srcSystemId  from hub.hubBookingManifest) hub on hub.dwhIdHubBookingManifest = sat.dwhIdHubBookingManifest) hubSat ON hubSat.dwhIdHubBookingManifest = satStatus.dwhIdHubBookingManifest) hubSatSatStatus ON hubSatSatStatus.dwhIdHubBookingManifest = satLnk1.dwhIdHubBookingManifest) hbsL1 ON hbsL1.dwhIdHubBookingManifest = satLnk2.dwhIdHubBookingManifest UNION SELECT  hbsL1.*, satLnk2.dwhIdHubBooking as dwhIdHubBookingShadowCopy FROM sat.satLnkBookingBookingManifestShadowCopy satLnk2 right JOIN (SELECT  hubSatSatStatus.*, satLnk1.dwhIdHubBooking as dwhIdHubBookingWorkingCopy FROM sat.satLnkBookingBookingManifest satLnk1 right JOIN (SELECT satStatus.validFrom, hubSat.*,  satStatus.status AS dmStatus  FROM sat.satBookingManifestStatus satStatus INNER JOIN (SELECT hub.*, sat.correctorReason, sat.correctorNr, sat.correctorType, sat.manifestType, sat.createdBy, sat.creationDate, sat.rolloverServiceCode, sat.rolloverFileLiner, sat.isSplit, sat.manifestFileId, sat.status from sat.satBookingManifest sat inner join (select dwhIdHubBookingManifest, bookMftId, accessCompanyId,  srcSystemId  from hub.hubBookingManifest) hub on hub.dwhIdHubBookingManifest = sat.dwhIdHubBookingManifest) hubSat ON hubSat.dwhIdHubBookingManifest = satStatus.dwhIdHubBookingManifest) hubSatSatStatus ON hubSatSatStatus.dwhIdHubBookingManifest = satLnk1.dwhIdHubBookingManifest) hbsL1 ON hbsL1.dwhIdHubBookingManifest = satLnk2.dwhIdHubBookingManifest  UNION SELECT * FROM (SELECT  hbsL1.*, satLnk2.dwhIdHubBooking as dwhIdHubBookingShadowCopy FROM sat.satLnkBookingBookingManifestShadowCopy satLnk2 right JOIN (SELECT satLnk1.validFrom, hubSatSatStatus.*, satLnk1.dwhIdHubBooking as dwhIdHubBookingWorkingCopy FROM sat.satLnkBookingBookingManifest satLnk1 right JOIN (SELECT hubSat.*,  satStatus.status AS dmStatus FROM sat.satBookingManifestStatus satStatus INNER JOIN (SELECT hub.*, sat.correctorReason, sat.correctorNr, sat.correctorType, sat.manifestType, sat.createdBy, sat.creationDate, sat.rolloverServiceCode, sat.rolloverFileLiner, sat.isSplit, sat.manifestFileId, sat.status from sat.satBookingManifest sat inner join (select dwhIdHubBookingManifest, bookMftId, accessCompanyId,  srcSystemId  from hub.hubBookingManifest) hub on hub.dwhIdHubBookingManifest = sat.dwhIdHubBookingManifest) hubSat ON hubSat.dwhIdHubBookingManifest = satStatus.dwhIdHubBookingManifest) hubSatSatStatus ON hubSatSatStatus.dwhIdHubBookingManifest = satLnk1.dwhIdHubBookingManifest) hbsL1 ON hbsL1.dwhIdHubBookingManifest = satLnk2.dwhIdHubBookingManifest)a WHERE dwhIdHubBookingWorkingCopy IS NOT null UNION SELECT * FROM (SELECT satLnk2.validFrom,  hbsL1.*, satLnk2.dwhIdHubBooking as dwhIdHubBookingShadowCopy FROM sat.satLnkBookingBookingManifestShadowCopy satLnk2 right JOIN (SELECT hubSatSatStatus.*, satLnk1.dwhIdHubBooking as dwhIdHubBookingWorkingCopy FROM sat.satLnkBookingBookingManifest satLnk1 right JOIN (SELECT hubSat.*,  satStatus.status AS dmStatus  FROM sat.satBookingManifestStatus satStatus INNER JOIN (SELECT hub.*, sat.correctorReason, sat.correctorNr, sat.correctorType, sat.manifestType, sat.createdBy, sat.creationDate, sat.rolloverServiceCode, sat.rolloverFileLiner, sat.isSplit, sat.manifestFileId, sat.status from sat.satBookingManifest sat inner join (select dwhIdHubBookingManifest, bookMftId, accessCompanyId,  srcSystemId  from hub.hubBookingManifest) hub on hub.dwhIdHubBookingManifest = sat.dwhIdHubBookingManifest) hubSat ON hubSat.dwhIdHubBookingManifest = satStatus.dwhIdHubBookingManifest) hubSatSatStatus ON hubSatSatStatus.dwhIdHubBookingManifest = satLnk1.dwhIdHubBookingManifest) hbsL1 ON hbsL1.dwhIdHubBookingManifest = satLnk2.dwhIdHubBookingManifest)a WHERE dwhIdHubBookingShadowCopy IS NOT null)w
bookingManifest.dataInDM.RowByKeys = select validFrom, dwhIdHubBookingManifest,  bookMftId, accessCompanyId, srcSystemId, correctorReason, correctorNr, correctorType,  manifestType, createdBy, creationDate, rolloverServiceCode, rolloverFileLiner, isSplit, manifestFileId, status,  dmStatus,   dwhIdHubBookingWorkingCopy, dwhIdHubBookingShadowCopy from  dim.dimBookingManifest

companyLocation.dim.CountRows = select COUNT (*) c from (select dwhIdHubCompany, dwhIdHubLocations, validFrom  from dim.dimCompanyLocation)q
companyLocation.dataInDV.commonPart = FROM (SELECT sats1.*, hub.accessCompanyId,  1 AS dmStatus  from hub.hubLocations hub inner join (SELECT  sats.validFrom, sats.dwhIdHubCompany, sats.srcSystemId, satLnk.dwhIdHubLocations  from sat.satLnkLocationsLocationsPortsOverview satLnk INNER join (select sat.validFrom, sat.dwhIdHubCompany, sat.srcSystemId, sat1.dwhIdHubLocationsPortsOverview  from sat.satLocationsPortsOverview sat1 inner join (select distinct validFrom, dwhIdHubCompany, srcSystemId,  agentCode from sat.satCompanyAgentCode) sat on sat.agentCode = sat1.agencyCode) sats on sats.dwhIdHubLocationsPortsOverview = satLnk.dwhIdHubLocationsPortsOverview) sats1 ON sats1.dwhIdHubLocations = hub.dwhIdHubLocations UNION SELECT  sats1.*, hub.accessCompanyId,  1 AS dmStatus  from hub.hubLocations hub inner join (SELECT  satLnk.validFrom, sats.dwhIdHubCompany, sats.srcSystemId, satLnk.dwhIdHubLocations  from sat.satLnkLocationsLocationsPortsOverview satLnk inner join (select sat.dwhIdHubCompany, sat.srcSystemId, sat1.dwhIdHubLocationsPortsOverview  from sat.satLocationsPortsOverview sat1 inner join (select DISTINCT dwhIdHubCompany, srcSystemId,  agentCode from sat.satCompanyAgentCode) sat on sat.agentCode = sat1.agencyCode) sats on sats.dwhIdHubLocationsPortsOverview = satLnk.dwhIdHubLocationsPortsOverview) sats1 ON sats1.dwhIdHubLocations = hub.dwhIdHubLocations)w
companyLocation.dataInDM.RowByKeys = select  validFrom,  dwhIdHubCompany, dwhIdHubLocations, accessCompanyId,  srcSystemId, 1 AS dmStatus from  dim.dimCompanyLocation

bookingHaulageDetails.dim.CountRows = select COUNT (*) c from (select dwhIdhubBookingHaulageDetails, validFrom  from dim.dimBookingHaulageDetails)q
bookingHaulageDetails.dataInDV.commonPart = FROM (SELECT  hubSatSatStatus.*, satLnk.dwhIdHubBooking  FROM sat.satLnkBookingBookingHaulageDetails satLnk RIGHT JOIN (SELECT hubSat.*, satStatus.status AS dmStatus  FROM sat.satBookingHaulageDetailsStatus satStatus INNER JOIN ( SELECT  sat.validFrom, hub.*, sat.city, sat.haulageDate, sat.haulageType, sat.haulierCode, sat.customerName, sat.address1, sat.address2, sat.address3, sat.zipCode, sat.bookLineNr from sat.satBookingHaulageDetails sat inner join (select dwhIdhubBookingHaulageDetails, bookingNumber, sequenceNumber, accessCompanyId, srcSystemId  from hub.hubBookingHaulageDetails) hub on hub.dwhIdhubBookingHaulageDetails = sat.dwhIdhubBookingHaulageDetails) hubSat ON hubSat.dwhIdhubBookingHaulageDetails = satStatus.dwhIdhubBookingHaulageDetails) hubSatSatStatus on hubSatSatStatus.dwhIdhubBookingHaulageDetails = satLnk.dwhIdhubBookingHaulageDetails UNION SELECT hubSatSatStatus.*, satLnk.dwhIdHubBooking  FROM sat.satLnkBookingBookingHaulageDetails satLnk RIGHT JOIN (SELECT  satStatus.validFrom, hubSat.*, satStatus.status AS dmStatus FROM sat.satBookingHaulageDetailsStatus satStatus INNER JOIN (SELECT hub.*, sat.city, sat.haulageDate, sat.haulageType, sat.haulierCode, sat.customerName, sat.address1, sat.address2, sat.address3, sat.zipCode, sat.bookLineNr from sat.satBookingHaulageDetails sat inner join (select dwhIdhubBookingHaulageDetails, bookingNumber, sequenceNumber, accessCompanyId,  srcSystemId  from hub.hubBookingHaulageDetails) hub on hub.dwhIdhubBookingHaulageDetails = sat.dwhIdhubBookingHaulageDetails) hubSat ON hubSat.dwhIdhubBookingHaulageDetails = satStatus.dwhIdhubBookingHaulageDetails) hubSatSatStatus on hubSatSatStatus.dwhIdhubBookingHaulageDetails = satLnk.dwhIdhubBookingHaulageDetails UNION SELECT satLnk.validFrom, hubSatSatStatus.*, satLnk.dwhIdHubBooking  FROM sat.satLnkBookingBookingHaulageDetails satLnk RIGHT JOIN (SELECT hubSat.*, satStatus.status AS dmStatus FROM sat.satBookingHaulageDetailsStatus satStatus INNER JOIN (SELECT hub.*, sat.city, sat.haulageDate, sat.haulageType, sat.haulierCode, sat.customerName, sat.address1, sat.address2, sat.address3, sat.zipCode, sat.bookLineNr from sat.satBookingHaulageDetails sat inner join (select dwhIdhubBookingHaulageDetails, bookingNumber, sequenceNumber, accessCompanyId,  srcSystemId  from hub.hubBookingHaulageDetails) hub on hub.dwhIdhubBookingHaulageDetails = sat.dwhIdhubBookingHaulageDetails) hubSat ON hubSat.dwhIdhubBookingHaulageDetails = satStatus.dwhIdhubBookingHaulageDetails) hubSatSatStatus on hubSatSatStatus.dwhIdhubBookingHaulageDetails = satLnk.dwhIdhubBookingHaulageDetails)w
bookingHaulageDetails.dataInDM.RowByKeys = select dwhIdhubBookingHaulageDetails, dwhIdHubBooking, bookingNumber, sequenceNumber, accessCompanyId,  city, haulageDate, haulageType, haulierCode, customerName, address1, address2,     address3, zipCode, bookLineNr,   dmStatus, validFrom, srcSystemId from  dim.dimBookingHaulageDetails

companyRegion.dim.CountRows = select COUNT (*) c from (select dwhIdHubCompany, validFrom  from dim.dimCompanyRegion)q
companyRegion.dataInDV.commonPart = FROM (SELECT distinct sat.validFrom, sat.agencyRegion as regionName, sat1.dwhIdHubCompany, 1 AS srcSystemId, 1 AS dmStatus FROM sat.satCompanyAgentCode sat1 INNER JOIN(SELECT DISTINCT validFrom, agencyRegion, agencyCode FROM sat.satLocationsPortsOverview WHERE agencyRegion IS NOT NULL      )sat ON sat.agencyCode = sat1.agentCode UNION SELECT distinct sat1.validFrom, sat.agencyRegion as regionName, sat1.dwhIdHubCompany, 1 AS srcSystemId, 1 AS dmStatus FROM sat.satCompanyAgentCode sat1 INNER JOIN( SELECT DISTINCT  agencyRegion, agencyCode FROM sat.satLocationsPortsOverview WHERE agencyRegion IS NOT NULL)sat ON sat.agencyCode = sat1.agentCode)w
companyRegion.dataInDM.RowByKeys = select validFrom,  regionName, dwhIdHubCompany, srcSystemId, dmStatus from  dim.dimCompanyRegion

controllingOffice.dim.CountRows = select COUNT (*) c from (select dwhIdHubControllingOffice, validFrom  from dim.dimControllingOffice)q
controllingOffice.dataInDV.commonPart FROM(SELECT DISTINCT all0.*,  case when func.isLandLockedCountry ='Y' then 1 when func.isLandLockedCountry ='N' then 0 else -1 end isLandLockedCountry FROM (select lcol.dwhIdHubControllingOffice, lcol.dwhIdHubLocations, lcol.validFrom, case when lead (lcol.validFrom) OVER (partition by lcol.dwhIdHubControllingOffice order by lcol.validFrom) is null then '2100-01-01 00:00:00.000' else dateadd (SS, -1, (lead (lcol.validFrom) OVER (partition by lcol.dwhIdHubControllingOffice order by lcol.validFrom))) end as lcolValidTo, spo.isLandLockedCountry from sat.satLnkControllingOfficeLocations lcol inner join(SELECT lll.dwhIdHubLocationsPortsOverview, lll.dwhIdHubLocations, lll.validFrom as lll_validFrom, case when lll.validFrom > lll.validTo then '2100-01-01 00:00:00.000' end as lll_ValidTo from sat.satLnkLocationsLocationsPortsOverview lll) lll on lcol.dwhIdHubLocations = lll.dwhIdHubLocations inner JOIN (select spo.dwhIdhubLocationsPortsOverview, spo.agencyCode,	spo.validFrom,	case when lead (spo.validFrom) OVER (partition by spo.dwhIdHubLocationsPortsOverview order by spo.validFrom) is null then '2100-01-01 00:00:00.000'	end as spoValidTo, spo.alterDate, spo.isLandLockedCountry	from sat.satLocationsPortsOverview spo) spo on lll.dwhIdHubLocationsPortsOverview = spo.dwhIdhubLocationsPortsOverview where 1 = 1 ) func RIGHT JOIN ( SELECT hubSatSatStaus.*, sat2.locationCode as colLocationCode FROM sat.satControllingOfficeAuxLocation sat2 RIGHT JOIN (SELECT distinct hubSat.*, satStatus.status AS dmStatus  from sat.satControllingOfficeStatus satStatus inner join (select distinct  sat.validFrom, hub.*, sat.companyName, sat.controllingOfficeFullName, sat.officeName from sat.satControllingOffice sat inner join (select dwhIdHubControllingOffice, officeId, companyId, srcSystemId  from hub.hubControllingOffice) hub on hub.dwhIdHubControllingOffice = sat.dwhIdHubControllingOffice) hubSat on hubSat.dwhIdHubControllingOffice = satStatus.dwhIdHubControllingOffice) hubSatSatStaus ON hubSatSatStaus.dwhIdHubControllingOffice = sat2.dwhIdHubControllingOffice )all0 ON all0.dwhIdHubControllingOffice = func.dwhIdHubControllingOffice UNION SELECT DISTINCT all0.*,  case when func.isLandLockedCountry ='Y' then 1 when func.isLandLockedCountry ='N' then 0 else -1 end isLandLockedCountry FROM (select lcol.dwhIdHubControllingOffice, lcol.dwhIdHubLocations, lcol.validFrom, case when lead (lcol.validFrom) OVER (partition by lcol.dwhIdHubControllingOffice order by lcol.validFrom) is null then '2100-01-01 00:00:00.000' else dateadd (SS, -1, (lead (lcol.validFrom) OVER (partition by lcol.dwhIdHubControllingOffice order by lcol.validFrom))) end as lcolValidTo, spo.isLandLockedCountry from sat.satLnkControllingOfficeLocations lcol inner JOIN (SELECT lll.dwhIdHubLocationsPortsOverview, lll.dwhIdHubLocations, lll.validFrom as lll_validFrom, case when lll.validFrom > lll.validTo then '2100-01-01 00:00:00.000' end as lll_ValidTo from sat.satLnkLocationsLocationsPortsOverview lll) lll on lcol.dwhIdHubLocations= lll.dwhIdHubLocations inner JOIN (select spo.dwhIdhubLocationsPortsOverview, spo.agencyCode,	spo.validFrom,	case when lead (spo.validFrom) OVER (partition by spo.dwhIdHubLocationsPortsOverview order by spo.validFrom) is null then '2100-01-01 00:00:00.000'	end as spoValidTo, spo.alterDate, spo.isLandLockedCountry from sat.satLocationsPortsOverview spo) spo on lll.dwhIdHubLocationsPortsOverview = spo.dwhIdhubLocationsPortsOverview	where 1 = 1) func RIGHT JOIN (SELECT hubSatSatStaus.*, sat2.locationCode  as colLocationCode FROM sat.satControllingOfficeAuxLocation sat2 RIGHT JOIN (SELECT distinct satStatus.validFrom, hubSat.*, satStatus.status AS dmStatus  from sat.satControllingOfficeStatus satStatus inner join (select distinct  hub.*, sat.companyName, sat.controllingOfficeFullName, sat.officeName from sat.satControllingOffice sat inner join (select dwhIdHubControllingOffice, officeId, companyId, srcSystemId  from hub.hubControllingOffice ) hub on hub.dwhIdHubControllingOffice = sat.dwhIdHubControllingOffice) hubSat on hubSat.dwhIdHubControllingOffice = satStatus.dwhIdHubControllingOffice) hubSatSatStaus ON hubSatSatStaus.dwhIdHubControllingOffice = sat2.dwhIdHubControllingOffice)all0 ON all0.dwhIdHubControllingOffice = func.dwhIdHubControllingOffice UNION SELECT * FROM (SELECT DISTINCT all0.*,  case when func.isLandLockedCountry ='Y' then 1 when func.isLandLockedCountry ='N' then 0 else -1 end isLandLockedCountry FROM (select lcol.dwhIdHubControllingOffice, lcol.dwhIdHubLocations, lcol.validFrom, case when lead (lcol.validFrom) OVER (partition by lcol.dwhIdHubControllingOffice order by lcol.validFrom) is null then '2100-01-01 00:00:00.000' else dateadd (SS, -1, (lead (lcol.validFrom) OVER (partition by lcol.dwhIdHubControllingOffice order by lcol.validFrom))) end as lcolValidTo, spo.isLandLockedCountry from sat.satLnkControllingOfficeLocations lcol inner JOIN (SELECT lll.dwhIdHubLocationsPortsOverview, lll.dwhIdHubLocations, lll.validFrom as lll_validFrom, case when lll.validFrom > lll.validTo then '2100-01-01 00:00:00.000' end as lll_ValidTo from sat.satLnkLocationsLocationsPortsOverview lll) lll on lcol.dwhIdHubLocations = lll.dwhIdHubLocations inner JOIN (select spo.dwhIdhubLocationsPortsOverview, spo.agencyCode,	spo.validFrom,	case when lead (spo.validFrom) OVER (partition by spo.dwhIdHubLocationsPortsOverview order by spo.validFrom) is null then '2100-01-01 00:00:00.000'	end as spoValidTo, spo.alterDate, spo.isLandlockedCountry from sat.satLocationsPortsOverview spo) spo on lll.dwhIdHubLocationsPortsOverview = spo.dwhIdhubLocationsPortsOverview	where 1 = 1) func RIGHT JOIN (SELECT sat2.validFrom, hubSatSatStaus.*, sat2.locationCode  as colLocationCode FROM sat.satControllingOfficeAuxLocation sat2 RIGHT JOIN (SELECT distinct hubSat.*, satStatus.status AS dmStatus  from sat.satControllingOfficeStatus satStatus inner join (select distinct  hub.*, sat.companyName, sat.controllingOfficeFullName, sat.officeName from sat.satControllingOffice sat inner join (select dwhIdHubControllingOffice, officeId, companyId, srcSystemId  from hub.hubControllingOffice) hub on hub.dwhIdHubControllingOffice = sat.dwhIdHubControllingOffice) hubSat on hubSat.dwhIdHubControllingOffice = satStatus.dwhIdHubControllingOffice) hubSatSatStaus ON hubSatSatStaus.dwhIdHubControllingOffice = sat2.dwhIdHubControllingOffice)all0 ON all0.dwhIdHubControllingOffice = func.dwhIdHubControllingOffice) a WHERE colLocationCode is NOT null)w
controllingOffice.dataInDM.RowByKeys = select validFrom,  dwhIdHubControllingOffice, officeId, companyId,  srcSystemId, companyName, controllingOfficeFullName, officeName, dmStatus, colLocationCode, isLandLockedCountry from  dim.dimControllingOffice

locationDestinationRegion.dim.CountRows = select COUNT (*) c from (select dwhIdHubLocations, validFrom  from dim.dimLocationDestinationRegion)q
locationDestinationRegion.dataInDV.commonPart = FROM  (SELECT distinct sat.validFrom, sat.destinationRegionName,  satLnk.dwhIdHubLocations, 1 AS srcSystemId, 1 AS dmStatus FROM sat.satlnkLocationsLocationsPortsOverview satLnk Right JOIN(SELECT DISTINCT validFrom, dwhIdHubLocationsPortsOverview, destinationRegion AS destinationRegionName FROM sat.satLocationsPortsOverview WHERE destinationRegion IS NOT NULL)sat ON sat.dwhIdHubLocationsPortsOverview = satLnk.dwhIdHubLocationsPortsOverview UNION SELECT DISTINCT satLnk.validFrom, sat.destinationRegionName, satLnk.dwhIdHubLocations, 1 AS srcSystemId, 1 AS dmStatus FROM sat.satlnkLocationsLocationsPortsOverview satLnk Right JOIN(        SELECT DISTINCT dwhIdHubLocationsPortsOverview, destinationRegion AS destinationRegionName FROM sat.satLocationsPortsOverview WHERE destinationRegion IS NOT NULL)sat ON sat.dwhIdHubLocationsPortsOverview = satLnk.dwhIdHubLocationsPortsOverview)w
locationDestinationRegion.dataInDM.RowByKeys = select validFrom,  destinationRegionName, dwhIdHubLocations, srcSystemId, dmStatus from  dim.dimLocationDestinationRegion

locationRegion.dim.CountRows = select COUNT (*) c from (select dwhIdHubLocations, validFrom  from dim.dimLocationRegion)q
locationRegion.dataInDV.commonPart = FROM (SELECT DISTINCT validFrom, dwhIdHubLocationsPortsOverview, agencyRegion AS regionName, 1 AS srcSystemId, 1 AS dmStatus FROM sat.satLocationsPortsOverview WHERE agencyRegion is NOT NULL)w
locationRegion.dataInDM.RowByKeys = select validFrom,  destinationRegionName, dwhIdHubLocations, srcSystemId, dmStatus from  dim.dimLocationRegion

oceanVesselService.dim.CountRows = select COUNT (*) c from (select dwhIdHubOceanVesselService, validFrom  from dim.dimOceanVesselService)q
oceanVesselService.dataInDV.commonPart = FROM (SELECT DISTINCT  sat.validFrom, hub.*, sat.status from sat.satOceanVesselServiceStatus sat inner join (select dwhIdHubOceanVesselService, carrierCode, serviceCode, shortName, fullName, accessCompanyId,  srcSystemId  from hub.hubOceanVesselService) hub on hub.dwhIdHubOceanVesselService = sat.dwhIdHubOceanVesselService)w
oceanVesselService.dataInDM.RowByKeys = select dwhIdHubOceanVesselService, carrierCode, serviceCode, shortName, fullName, accessCompanyId, srcSystemId, dmStatus as status, validFrom from  dim.dimOceanVesselService

oceanVesselStatus.dim.CountRows = select COUNT (*) c from (select dwhIdHubOceanVesselStatus, validFrom  from dim.dimOceanVesselStatus)q
oceanVesselStatus.dataInDV.commonPart = FROM (SELECT DISTINCT  sat.validFrom, hub.*, sat.status  as dmStatus from sat.satOceanVesselStatusStatus sat inner join (select dwhIdHubOceanVesselStatus, statusCode, carrierCode, serviceCode, segmentCode,  accessCompanyId,  srcSystemId  from hub.hubOceanVesselStatus) hub on hub.dwhIdHubOceanVesselStatus = sat.dwhIdHubOceanVesselStatus)w
oceanVesselStatus.dataInDM.RowByKeys = select validFrom, dwhIdHubOceanVesselStatus, statusCode, carrierCode, serviceCode, segmentCode,  accessCompanyId,  srcSystemId, dmStatus from  dim.dimOceanVesselStatus

tradeForEmedStat.dim.CountRows = select COUNT (*) c from (select tradeNameGvaForEmedStat, validFrom  from dim.dimTradeForEmedStat)q
tradeForEmedStat.dataInDV.commonPart = FROM (SELECT  tradeNameGvaForEmedStat, 1 AS srcSystemId, 1  AS dmStatus, (SELECT  CONVERT(datetime, '2000-01-01', 104)) as validFrom, (SELECT  CONVERT(datetime, '2100-01-01', 104)) as validTo FROM (select DISTINCT tradeNameGvaForEmedStat  from sat.satLocationsPortsOverview WHERE tradeNameGvaForEmedStat IS NOT NULL)sat) w
tradeForEmedStat.dataInDM.RowByKeys = select tradeNameGvaForEmedStat, srcSystemId, dmStatus, validFrom, validTo  from  dim.dimTradeForEmedStat

ovTradeName.dim.CountRows =  select COUNT (*) c from (select ovTradeName, accessCompanyId from dim.dimOvTradeName)q
ovTradeName.dataInDV.commonPart = FROM (SELECT accessCompanyId, ovTradeName, (SELECT  CONVERT(datetime, '2000-01-01', 104)) as validFrom, (SELECT  CONVERT(datetime, '2100-01-01', 104)) as validTo, 0 as srcSystemId, 1 as dmStatus from ( select distinct hub.accessCompanyId, sat.ovTradeName from hub.hubLocations hub inner join (select  dwhIdHubLocations, ovTradeName  from  sat.satLocations where ovTradeName is not NULL) sat on sat.dwhIdHubLocations = hub.dwhIdHubLocations UNION  SELECT hub.accessCompanyId, sat.gvaTrade AS ovTradeName  FROM hub.hubBooking hub INNER JOIN (  SELECT dwhIdHubBooking, gvaTrade FROM sat.satBooking  WHERE gvaTrade IS NOT NULL) sat ON hub.dwhIdHubBooking = sat.dwhIdHubBooking)w)a
ovTradeName.dataInDM.RowByKeys = select accessCompanyId, ovTradeName, validFrom, validTo, srcSystemId, dmStatus  from dim.dimOvTradeName

ovTradeNumber.dim.CountRows =  select COUNT (*) c from (select accessCompanyId, ovTradeNumber, ovTradeDirection from dim.dimOvTradeNumber)q
ovTradeNumber.dataInDV.commonPart = FROM(SELECT accessCompanyId, Trade AS ovTradeNumber, importExportCode AS ovTradeDirection, (SELECT  CONVERT(datetime, '2000-01-01', 104)) as validFrom, (SELECT  CONVERT(datetime, '2100-01-01', 104)) as validTo, 0 as srcSystemId, 1 as dmStatus from  ( select distinct hub.accessCompanyId, sat.ovTradeNumber AS Trade,  importExportCode  from hub.hubLocations hub inner join (select  dwhIdHubLocations, ovTradeNumberExp AS ovTradeNumber, 'E' AS  importExportCode from  sat.satLocations where ovTradeNumberExp is not NULL union select  dwhIdHubLocations, ovTradeNumberImp AS ovTradeNumber, 'I' AS  importExportCode from  sat.satLocations where ovTradeNumberImp is not NULL) sat on sat.dwhIdHubLocations = hub.dwhIdHubLocations UNION SELECT hub.accessCompanyId, sat.oceanTrade AS Trade, sat.importExportCode  FROM hub.hubBooking hub INNER JOIN (SELECT dwhIdHubBooking, oceanTrade, importExportCode FROM sat.satBooking  WHERE oceanTrade IS NOT NULL and importExportCode IS NOT NULL) sat ON hub.dwhIdHubBooking = sat.dwhIdHubBooking  )w )a
ovTradeNumber.dataInDM.RowByKeys = select accessCompanyId, ovTradeNumber, ovTradeDirection, validFrom, validTo, srcSystemId, dmStatus from dim.dimOvTradeNumber

locations.dim.CountRows =  select COUNT (*) c from (select dwhIdHubLocations, validFrom from dim.dimLocations)q
locations.dataInDV.commonPart =  FROM (SELECT main2.*, tradeNameGvaForEmedStat.tradeNameGvaForEmedStat from (SELECT satlnk.dwhIdHubLocations, tradeNameGvaForEmedStat  FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT DISTINCT  dwhIdHubLocationsPortsOverview, tradeNameGvaForEmedStat FROM sat.satLocationsPortsOverview where tradeNameGvaForEmedStat IS NOT NULL) sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) tradeNameGvaForEmedStat RIGHT JOIN (SELECT  main1.*, CASE WHEN scanbalt.isScanBalt IS NULL THEN 0 END isScanBalt FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isScanBalt FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'SCANBALT') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) scanbalt RIGHT JOIN(SELECT main.*, CASE WHEN adriatic.isAdriatic IS NULL THEN 0 END isAdriatic FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isAdriatic FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT distinct dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'ADRIATIC') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) adriatic RIGHT JOIN(SELECT hubSatStatus.*, satLnk.dwhIdHubCountry FROM sat.satLnkLocationsCountry satLnk RIGHT JOIN(SELECT hubSat.*, satStatus.status AS dmStatus FROM sat.satLocationsStatus satStatus INNER JOIN (SELECT DISTINCT  sat.validFrom, hub.*, sat.locationName, sat.ovTradeNumberExp, sat.ovTradeNumberImp, sat.ovTradeName, sat.gvaTrade, sat.countryCode, sat.hasManifests  FROM sat.satLocations sat INNER JOIN (select  dwhIdHubLocations, locationCode, dictionaryType, sequenceNumber, accessCompanyId, srcSystemId  from  hub.hubLocations)hub ON hub.dwhIdHubLocations= sat.dwhIdHubLocations) hubSat ON hubSat.dwhIdHubLocations = satStatus.dwhIdHubLocations  AND hubSat.validFrom = satStatus.validFrom) hubSatStatus ON hubSatStatus.dwhIdHubLocations = satLnk.dwhIdHubLocations) main ON main.dwhIdHubLocations = adriatic.dwhIdHubLocations) main1 ON main1.dwhIdHubLocations = scanbalt.dwhIdHubLocations) main2 ON main2.dwhIdHubLocations = tradeNameGvaForEmedStat.dwhIdHubLocations UNION SELECT main2.*, tradeNameGvaForEmedStat.tradeNameGvaForEmedStat from ( SELECT satlnk.dwhIdHubLocations, tradeNameGvaForEmedStat  FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT DISTINCT  dwhIdHubLocationsPortsOverview, tradeNameGvaForEmedStat FROM sat.satLocationsPortsOverview where tradeNameGvaForEmedStat IS NOT NULL) sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) tradeNameGvaForEmedStat RIGHT JOIN (SELECT  main1.*, CASE WHEN scanbalt.isScanBalt IS NULL THEN 0 END isScanBalt FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isScanBalt FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (  SELECT dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'SCANBALT') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) scanbalt RIGHT JOIN(SELECT main.*, CASE WHEN adriatic.isAdriatic IS NULL THEN 0 END isAdriatic FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isAdriatic FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT distinct dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'ADRIATIC') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) adriatic RIGHT JOIN(SELECT hubSatStatus.*, satLnk.dwhIdHubCountry FROM sat.satLnkLocationsCountry satLnk RIGHT JOIN(SELECT satStatus.validFrom, hubSat.dwhIdHubLocations, hubSat.locationCode, hubSat.dictionaryType, hubSat.sequenceNumber, hubSat.accessCompanyId, hubSat.srcSystemId, hubSat.locationName, hubSat.ovTradeNumberExp, hubSat.ovTradeNumberImp, hubSat.ovTradeName, hubSat.gvaTrade, hubSat.countryCode, hubSat.hasManifests, satStatus.status AS dmStatus FROM sat.satLocationsStatus satStatus INNER JOIN (SELECT DISTINCT sat.validFrom,  hub.*, sat.locationName, sat.ovTradeNumberExp, sat.ovTradeNumberImp, sat.ovTradeName, sat.gvaTrade, sat.countryCode, sat.hasManifests  FROM sat.satLocations sat INNER JOIN (select  dwhIdHubLocations, locationCode, dictionaryType, sequenceNumber, accessCompanyId, srcSystemId  from  hub.hubLocations )hub ON hub.dwhIdHubLocations= sat.dwhIdHubLocations) hubSat ON hubSat.dwhIdHubLocations = satStatus.dwhIdHubLocations AND hubSat.validFrom = satStatus.validFrom) hubSatStatus ON hubSatStatus.dwhIdHubLocations = satLnk.dwhIdHubLocations) main ON main.dwhIdHubLocations = adriatic.dwhIdHubLocations) main1 ON main1.dwhIdHubLocations = scanbalt.dwhIdHubLocations) main2 ON main2.dwhIdHubLocations = tradeNameGvaForEmedStat.dwhIdHubLocations UNION SELECT * FROM (SELECT main2.*, tradeNameGvaForEmedStat.tradeNameGvaForEmedStat from (SELECT satlnk.dwhIdHubLocations, tradeNameGvaForEmedStat  FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT DISTINCT  dwhIdHubLocationsPortsOverview, tradeNameGvaForEmedStat FROM sat.satLocationsPortsOverview where tradeNameGvaForEmedStat IS NOT NULL) sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) tradeNameGvaForEmedStat RIGHT JOIN (SELECT  main1.*, CASE WHEN scanbalt.isScanBalt IS NULL THEN 0 END isScanBalt FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isScanBalt FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'SCANBALT') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) scanbalt RIGHT JOIN(SELECT main.*, CASE WHEN adriatic.isAdriatic IS NULL THEN 0 END isAdriatic FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isAdriatic FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT distinct dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'ADRIATIC') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) adriatic RIGHT JOIN(SELECT satLnk.validFrom, hubSatStatus.dwhIdHubLocations, hubSatStatus.locationCode, hubSatStatus.dictionaryType, hubSatStatus.sequenceNumber, hubSatStatus.accessCompanyId, hubSatStatus.srcSystemId, hubSatStatus.locationName, hubSatStatus.ovTradeNumberExp, hubSatStatus.ovTradeNumberImp, hubSatStatus.ovTradeName, hubSatStatus.gvaTrade, hubSatStatus.countryCode, hubSatStatus.hasManifests, hubSatStatus.dmStatus, satLnk.dwhIdHubCountry FROM sat.satLnkLocationsCountry satLnk RIGHT JOIN(SELECT  hubSat.*, satStatus.status AS dmStatus FROM sat.satLocationsStatus satStatus INNER JOIN (SELECT DISTINCT sat.validFrom, hub.*, sat.locationName, sat.ovTradeNumberExp, sat.ovTradeNumberImp, sat.ovTradeName, sat.gvaTrade, sat.countryCode, sat.hasManifests  FROM sat.satLocations sat INNER JOIN (select  dwhIdHubLocations, locationCode, dictionaryType, sequenceNumber, accessCompanyId, srcSystemId  from  hub.hubLocations)hub ON hub.dwhIdHubLocations= sat.dwhIdHubLocations) hubSat ON hubSat.dwhIdHubLocations = satStatus.dwhIdHubLocations AND hubSat.validFrom = satStatus.validFrom) hubSatStatus ON hubSatStatus.dwhIdHubLocations = satLnk.dwhIdHubLocations AND hubSatStatus.validFrom = satLnk.validFrom) main ON main.dwhIdHubLocations = adriatic.dwhIdHubLocations) main1 ON main1.dwhIdHubLocations = scanbalt.dwhIdHubLocations) main2 ON main2.dwhIdHubLocations = tradeNameGvaForEmedStat.dwhIdHubLocations ) a WHERE dwhIdHubCountry IS NOT null UNION  SELECT * FROM (SELECT main2.*, tradeNameGvaForEmedStat.tradeNameGvaForEmedStat from (SELECT satlnk.dwhIdHubLocations, tradeNameGvaForEmedStat  FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT DISTINCT  dwhIdHubLocationsPortsOverview, tradeNameGvaForEmedStat FROM sat.satLocationsPortsOverview where tradeNameGvaForEmedStat IS NOT NULL) sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) tradeNameGvaForEmedStat RIGHT JOIN (SELECT  main1.*, CASE WHEN scanbalt.isScanBalt IS NULL THEN 0 END isScanBalt FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isScanBalt FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'SCANBALT') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) scanbalt RIGHT JOIN(SELECT adriatic.validFrom, main.*, CASE WHEN adriatic.isAdriatic IS NULL THEN 0 END isAdriatic FROM (SELECT sat.validFrom, satlnk.dwhIdHubLocations, 1 AS isAdriatic FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT distinct dwhIdHubLocationsPortsOverview, validFrom FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'ADRIATIC') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview  UNION SELECT satlnk.validFrom, satlnk.dwhIdHubLocations, 1 AS isAdriatic FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT distinct dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'ADRIATIC') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) adriatic RIGHT JOIN(SELECT hubSatStatus.dwhIdHubLocations, hubSatStatus.locationCode, hubSatStatus.dictionaryType, hubSatStatus.sequenceNumber, hubSatStatus.accessCompanyId, hubSatStatus.srcSystemId, hubSatStatus.locationName, hubSatStatus.ovTradeNumberExp, hubSatStatus.ovTradeNumberImp, hubSatStatus.ovTradeName, hubSatStatus.gvaTrade, hubSatStatus.countryCode, hubSatStatus.hasManifests, hubSatStatus.dmStatus, satLnk.dwhIdHubCountry FROM sat.satLnkLocationsCountry satLnk RIGHT JOIN(SELECT  hubSat.*, satStatus.status AS dmStatus FROM sat.satLocationsStatus satStatus INNER JOIN (SELECT DISTINCT sat.validFrom, hub.*, sat.locationName, sat.ovTradeNumberExp, sat.ovTradeNumberImp, sat.ovTradeName, sat.gvaTrade, sat.countryCode, sat.hasManifests  FROM sat.satLocations sat INNER JOIN (select  dwhIdHubLocations, locationCode, dictionaryType, sequenceNumber, accessCompanyId, srcSystemId  from  hub.hubLocations)hub ON hub.dwhIdHubLocations= sat.dwhIdHubLocations) hubSat ON hubSat.dwhIdHubLocations = satStatus.dwhIdHubLocations AND hubSat.validFrom = satStatus.validFrom) hubSatStatus ON hubSatStatus.dwhIdHubLocations = satLnk.dwhIdHubLocations) main ON main.dwhIdHubLocations = adriatic.dwhIdHubLocations) main1 ON main1.dwhIdHubLocations = scanbalt.dwhIdHubLocations) main2 ON main2.dwhIdHubLocations = tradeNameGvaForEmedStat.dwhIdHubLocations )a WHERE isAdriatic !=0 UNION SELECT * FROM(SELECT main2.*, tradeNameGvaForEmedStat.tradeNameGvaForEmedStat from (SELECT satlnk.dwhIdHubLocations, tradeNameGvaForEmedStat  FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT DISTINCT  dwhIdHubLocationsPortsOverview, tradeNameGvaForEmedStat FROM sat.satLocationsPortsOverview where tradeNameGvaForEmedStat IS NOT NULL) sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) tradeNameGvaForEmedStat RIGHT JOIN (SELECT scanbalt.validFrom, main1.*, CASE WHEN scanbalt.isScanBalt IS NULL THEN 0 END isScanBalt FROM (SELECT sat.validFrom, satlnk.dwhIdHubLocations, 1 AS isScanBalt FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT dwhIdHubLocationsPortsOverview, validFrom FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'SCANBALT') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview UNION SELECT satlnk.validFrom, satlnk.dwhIdHubLocations, 1 AS isScanBalt FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'SCANBALT') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) scanbalt RIGHT JOIN(SELECT main.*, CASE WHEN adriatic.isAdriatic IS NULL THEN 0 END isAdriatic FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isAdriatic FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT distinct dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'ADRIATIC') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) adriatic RIGHT JOIN(SELECT  hubSatStatus.dwhIdHubLocations, hubSatStatus.locationCode, hubSatStatus.dictionaryType, hubSatStatus.sequenceNumber, hubSatStatus.accessCompanyId, hubSatStatus.srcSystemId, hubSatStatus.locationName, hubSatStatus.ovTradeNumberExp, hubSatStatus.ovTradeNumberImp, hubSatStatus.ovTradeName, hubSatStatus.gvaTrade, hubSatStatus.countryCode, hubSatStatus.hasManifests, hubSatStatus.dmStatus, satLnk.dwhIdHubCountry FROM sat.satLnkLocationsCountry satLnk RIGHT JOIN(SELECT  hubSat.*, satStatus.status AS dmStatus FROM sat.satLocationsStatus satStatus INNER JOIN (SELECT DISTINCT sat.validFrom, hub.*, sat.locationName, sat.ovTradeNumberExp, sat.ovTradeNumberImp, sat.ovTradeName, sat.gvaTrade, sat.countryCode, sat.hasManifests  FROM sat.satLocations sat INNER JOIN (select  dwhIdHubLocations, locationCode, dictionaryType, sequenceNumber, accessCompanyId, srcSystemId  from  hub.hubLocations )hub ON hub.dwhIdHubLocations= sat.dwhIdHubLocations) hubSat ON hubSat.dwhIdHubLocations = satStatus.dwhIdHubLocations AND hubSat.validFrom = satStatus.validFrom) hubSatStatus ON hubSatStatus.dwhIdHubLocations = satLnk.dwhIdHubLocations) main ON main.dwhIdHubLocations = adriatic.dwhIdHubLocations) main1 ON main1.dwhIdHubLocations = scanbalt.dwhIdHubLocations) main2 ON main2.dwhIdHubLocations = tradeNameGvaForEmedStat.dwhIdHubLocations  )a WHERE isScanBalt !=0UNION  SELECT * FROM(SELECT tradeNameGvaForEmedStat.validFrom, main2.*, tradeNameGvaForEmedStat.tradeNameGvaForEmedStat from (SELECT sat.validFrom, satlnk.dwhIdHubLocations, tradeNameGvaForEmedStat  FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN ( SELECT DISTINCT  dwhIdHubLocationsPortsOverview, tradeNameGvaForEmedStat, validFrom FROM sat.satLocationsPortsOverview where tradeNameGvaForEmedStat IS NOT NULL) sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview  UNION SELECT satlnk.validFrom,  satlnk.dwhIdHubLocations, tradeNameGvaForEmedStat  FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT DISTINCT  dwhIdHubLocationsPortsOverview, tradeNameGvaForEmedStat FROM sat.satLocationsPortsOverview where tradeNameGvaForEmedStat IS NOT NULL) sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) tradeNameGvaForEmedStat RIGHT JOIN (SELECT  main1.*, CASE WHEN scanbalt.isScanBalt IS NULL THEN 0 END isScanBalt FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isScanBalt FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'SCANBALT') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) scanbalt RIGHT JOIN( SELECT main.*, CASE WHEN adriatic.isAdriatic IS NULL THEN 0 END isAdriatic FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isAdriatic FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT distinct dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'ADRIATIC') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) adriatic RIGHT JOIN(SELECT  hubSatStatus.dwhIdHubLocations, hubSatStatus.locationCode, hubSatStatus.dictionaryType, hubSatStatus.sequenceNumber, hubSatStatus.accessCompanyId, hubSatStatus.srcSystemId,hubSatStatus.locationName, hubSatStatus.ovTradeNumberExp, hubSatStatus.ovTradeNumberImp, hubSatStatus.ovTradeName, hubSatStatus.gvaTrade, hubSatStatus.countryCode, hubSatStatus.hasManifests, hubSatStatus.dmStatus, satLnk.dwhIdHubCountry FROM sat.satLnkLocationsCountry satLnk RIGHT JOIN(SELECT  hubSat.*, satStatus.status AS dmStatus FROM sat.satLocationsStatus satStatus INNER JOIN (SELECT DISTINCT sat.validFrom, hub.*, sat.locationName, sat.ovTradeNumberExp, sat.ovTradeNumberImp, sat.ovTradeName, sat.gvaTrade, sat.countryCode, sat.hasManifests  FROM sat.satLocations sat INNER JOIN (select  dwhIdHubLocations, locationCode, dictionaryType, sequenceNumber, accessCompanyId, srcSystemId  from  hub.hubLocations )hub ON hub.dwhIdHubLocations= sat.dwhIdHubLocations) hubSat ON hubSat.dwhIdHubLocations = satStatus.dwhIdHubLocations AND hubSat.validFrom = satStatus.validFrom) hubSatStatus ON hubSatStatus.dwhIdHubLocations = satLnk.dwhIdHubLocations) main ON main.dwhIdHubLocations = adriatic.dwhIdHubLocations) main1 ON main1.dwhIdHubLocations = scanbalt.dwhIdHubLocations) main2 ON main2.dwhIdHubLocations = tradeNameGvaForEmedStat.dwhIdHubLocations )a WHERE tradeNameGvaForEmedStat IS NOT NULL/*below additional condition for validFrom from satLocationsPortsOverview (we are load from here and decided to leave it)*/ UNION SELECT main2.validFrom, main2.dwhIdHubLocations, main2.locationCode, main2.dictionaryType, main2.sequenceNumber, main2.accessCompanyId, main2.srcSystemId, main2.locationName, main2.ovTradeNumberExp, main2.ovTradeNumberImp, main2.ovTradeName, main2.gvaTrade, main2.countryCode, main2.hasManifests, main2.dmStatus, main2.dwhIdHubCountry, main2.isAdriatic, main2.isScanBalt,  tradeNameGvaForEmedStat.tradeNameGvaForEmedStat from (SELECT satlnk.dwhIdHubLocations, tradeNameGvaForEmedStat  FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT DISTINCT  dwhIdHubLocationsPortsOverview, tradeNameGvaForEmedStat FROM sat.satLocationsPortsOverview where tradeNameGvaForEmedStat IS NOT NULL) sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) tradeNameGvaForEmedStat RIGHT JOIN (SELECT  main1.*, CASE WHEN scanbalt.isScanBalt IS NULL THEN 0 END isScanBalt FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isScanBalt FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'SCANBALT') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) scanbalt RIGHT JOIN(SELECT distinct main.*, CASE WHEN adriatic.isAdriatic IS NULL THEN 0 END isAdriatic FROM (SELECT satlnk.dwhIdHubLocations, 1 AS isAdriatic FROM sat.satlnkLocationsLocationsPortsOverview satlnk INNER JOIN (SELECT distinct  dwhIdHubLocationsPortsOverview FROM sat.satLocationsPortsOverview where upper (ltrim (rtrim (agencyRegion))) = 'ADRIATIC') sat ON sat.dwhIdHubLocationsPortsOverview =  satlnk.dwhIdHubLocationsPortsOverview) adriatic RIGHT JOIN( SELECT satPO.validFrom, /*mainSatPO.**/ mainSatPO.dwhIdHubLocations, mainSatPO.locationCode, mainSatPO.dictionaryType, mainSatPO.sequenceNumber, mainSatPO.accessCompanyId, mainSatPO.srcSystemId, mainSatPO.locationName, mainSatPO.ovTradeNumberExp, mainSatPO.ovTradeNumberImp, mainSatPO.ovTradeName, mainSatPO.gvaTrade, mainSatPO.countryCode, mainSatPO.hasManifests, mainSatPO.dmStatus, mainSatPO.dwhIdHubCountry FROM sat.satLocationsPortsOverview satPO INNER JOIN(SELECT satlnkPO.dwhIdHubLocationsPortsOverview, mainPO.* FROM sat.satlnkLocationsLocationsPortsOverview satlnkPO INNER JOIN(SELECT hubSatStatus.*,/* distinct  hubSatStatus.dwhIdHubLocations, hubSatStatus.locationCode, hubSatStatus.dictionaryType, hubSatStatus.sequenceNumber, hubSatStatus.accessCompanyId, hubSatStatus.srcSystemId, hubSatStatus.locationName, hubSatStatus.ovTradeNumberExp, hubSatStatus.ovTradeNumberImp, hubSatStatus.ovTradeName, hubSatStatus.gvaTrade, hubSatStatus.countryCode, hubSatStatus.hasManifests, hubSatStatus.dmStatus, */ satLnk.dwhIdHubCountry FROM sat.satLnkLocationsCountry satLnk RIGHT JOIN(SELECT  hubSat.*, satStatus.status AS dmStatus FROM sat.satLocationsStatus satStatus INNER JOIN (SELECT DISTINCT sat.validFrom, hub.*, sat.locationName, sat.ovTradeNumberExp, sat.ovTradeNumberImp, sat.ovTradeName, sat.gvaTrade, sat.countryCode, sat.hasManifests  FROM sat.satLocations sat INNER JOIN (select  dwhIdHubLocations, locationCode, dictionaryType, sequenceNumber, accessCompanyId, srcSystemId  from  hub.hubLocations)hub ON hub.dwhIdHubLocations= sat.dwhIdHubLocations) hubSat ON hubSat.dwhIdHubLocations = satStatus.dwhIdHubLocations AND hubSat.validFrom = satStatus.validFrom) hubSatStatus ON hubSatStatus.dwhIdHubLocations = satLnk.dwhIdHubLocations)mainPO ON mainPO.dwhIdHubLocations =  satlnkPO.dwhIdHubLocations)mainSatPO ON mainSatPO.dwhIdHubLocationsPortsOverview = satPO.dwhIdHubLocationsPortsOverview) main ON main.dwhIdHubLocations = adriatic.dwhIdHubLocations) main1 ON main1.dwhIdHubLocations = scanbalt.dwhIdHubLocations) main2 ON main2.dwhIdHubLocations = tradeNameGvaForEmedStat.dwhIdHubLocations)w
locations.dataInDM.RowByKeys = select dwhIdHubLocations, dwhIdHubCountry, locationCode, dictionaryType, sequenceNumber, locationName,ovTradeNumberExp,  ovTradeNumberImp ,ovTradeName ,gvaTrade, tradeNameGvaForEmedStat, countryCode, hasManifests, isAdriatic, isScanBalt, accessCompanyId, srcSystemId, dmStatus, validFrom   from dim.dimLocations

gvaTrade.dim.CountRows =  select COUNT (*) c from (select gvaTrade, accessCompanyId from dim.dimGvaTrade)q
gvaTrade.dataInDV.commonPart = FROM (SELECT accessCompanyId, gvaTrade, (SELECT  CONVERT(datetime, '2000-01-01', 104)) as validFrom, (SELECT  CONVERT(datetime, '2100-01-01', 104)) as validTo, 0 as srcSystemId, 1 as dmStatus from (select distinct  hub.accessCompanyId, sat.gvaTrade from hub.hubLocations hub inner join (select  dwhIdHubLocations, gvaTrade from sat.satLocations WHERE gvaTrade IS NOT NULL) sat on sat.dwhIdHubLocations = hub.dwhIdHubLocations)w)a
gvaTrade.dataInDM.RowByKeys = select gvaTrade, accessCompanyId, srcSystemId, dmStatus, validFrom, validTo from dim.dimGvaTrade

company.dwh.CountRows = select count (*) c from (SELECT distinct dwhIdHubCompany, validFrom from sat.satCompanyStatus union SELECT distinct dwhIdHubCompany, validFrom from sat.satCompany union select distinct dwhIdHubCompany, validFrom from sat.satCompanyAgentCode) q
company.dim.CountRows = select COUNT (*) c from (select dwhIdHubCompany, validFrom  from dim.dimCompany)q
company.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by dwhIdHubCompany) AS RowNumber,  dwhIdHubCompany, companyId, companyName, address1, address2, address3,  zipCode, homeCurrencyCode, agentCode, status, validFrom, srcSystemId, dwhIdHubCountry, isLandlockedCountry from (select distinct b.*, case when func2.isLandlockedCountry ='Y' then 1 when func2.isLandlockedCountry ='N' then 0 else -1 end isLandlockedCountry from(      select  distinct a.*, func1.dwhIdHubCountry from (      select distinct allmain.dwhIdHubCompany, allmain.companyId, allmain.companyName, allmain.address1, allmain.address2, allmain.address3, allmain.zipCode, allmain.homeCurrencyCode, sat2.agentCode, allmain.status, allmain.validFrom, allmain.srcSystemId from sat.satCompanyAgentCode sat2 right join (      select  DISTINCT hub1sat1.dwhIdHubCompany, hub1sat1.companyId, hub1sat1.companyName, hub1sat1.address1, hub1sat1.address2, hub1sat1.address3, hub1sat1.zipCode, hub1sat1.homeCurrencyCode, satStatus.status, hub1sat1.validFrom, hub1sat1.srcSystemId from sat.satCompanyStatus satStatus inner join (      select hub1.dwhIdHubCompany, hub1.companyId, sat1.companyName, sat1.address1, sat1.address2, sat1.address3, sat1.zipCode, sat1.homeCurrencyCode, sat1.validFrom, hub1.srcSystemId from sat.satCompany sat1 inner join ( select dwhIdHubCompany, companyId, srcSystemId from hub.hubCompany) hub1 on hub1.dwhIdHubCompany =  sat1.dwhIdHubCompany) hub1sat1 on hub1sat1.dwhIdHubCompany= satStatus.dwhIdHubCompany) allmain on allmain.dwhIdHubCompany= sat2.dwhIdHubCompany)a left join (select hc.accessCompanyId, spo.agencyCode, spo.validFrom, case when lead (spo.validFrom) OVER (partition by spo.dwhIdHubLocationsPortsOverview order by spo.validFrom) is null then '2100-01-01 00:00:00.000' else dateadd (SS, -1, (lead (spo.validFrom) OVER (partition by spo.dwhIdHubLocationsPortsOverview order by spo.validFrom))) end as spoValidTo, hc.dwhIdHubCountry, spo.alterDate from sat.satLocationsPortsOverview spo inner join (select lll.dwhIdHubLocationsPortsOverview, lll.dwhIdHubLocations, lll.validFrom as lll_validFrom, case when  lll.validFrom > lll.validTo then '2100-01-01 00:00:00.000'      else dateadd (SS, -1, (lead (lll.validFrom) OVER (partition by lll.dwhIdHubLocationsPortsOverview order by lll.validFrom))) end as lll_ValidTo from sat.satLnkLocationsLocationsPortsOverview lll) lll on spo.dwhIdHubLocationsPortsOverview = lll.dwhIdHubLocationsPortsOverview inner join (select llc.dwhIdHubLocations,	llc.dwhIdHubCountry, llc.validFrom as llc_validFrom, case when  llc.validFrom > llc.validTo then '2100-01-01 00:00:00.000' else dateadd (SS, -1, (lead (llc.validFrom) OVER (partition by llc.dwhIdHubLocations order by llc.validFrom))) end as llc_ValidTo from sat.satLnkLocationsCountry llc) llc on lll.dwhIdHubLocations = llc.dwhIdHubLocations inner join (select scs.dwhIdHubCountry,scs.status, scs.validFrom as scs_validFrom, case when  scs.validFrom >= scs.validTo then '2100-01-01 00:00:00.000' else dateadd (SS, -1, (lead (scs.validFrom) OVER (partition by scs.dwhIdHubCountry order by scs.validFrom))) end as scs_ValidTo from sat.satCountryStatus scs) scs	on llc.dwhIdHubCountry = scs.dwhIdHubCountry inner join hub.hubCountry hc on llc.dwhIdHubCountry = hc.dwhIdHubCountry where 1 = 1 and spo.agencyRegion is not null and GETDATE() between lll_validFrom and lll_validTo and GETDATE()  between llc_validFrom and llc_validTo and GETDATE()  between scs_validFrom and scs_validTo) func1 on a.agentCode = func1.agencyCode and a.companyId =  func1.accessCompanyId) b left join (select hc.accessCompanyId, spo.agencyCode, spo.validFrom, case when lead (spo.validFrom) OVER (partition by spo.dwhIdHubLocationsPortsOverview order by spo.validFrom) is null then '2100-01-01 00:00:00.000' else dateadd (SS, -1, (lead (spo.validFrom) OVER (partition by spo.dwhIdHubLocationsPortsOverview order by spo.validFrom))) end as spoValidTo, hc.dwhIdHubCountry, spo.alterDate, spo.isLandlockedCountry from sat.satLocationsPortsOverview spo inner join (select lll.dwhIdHubLocationsPortsOverview,	lll.dwhIdHubLocations, lll.validFrom as lll_validFrom, case when  lll.validFrom > lll.validTo then '2100-01-01 00:00:00.000' else dateadd (SS, -1, (lead (lll.validFrom) OVER (partition by lll.dwhIdHubLocationsPortsOverview order by lll.validFrom))) end as lll_ValidTo	from sat.satLnkLocationsLocationsPortsOverview lll) lll	on spo.dwhIdHubLocationsPortsOverview = lll.dwhIdHubLocationsPortsOverview inner join (select llc.dwhIdHubLocations, llc.dwhIdHubCountry, llc.validFrom as llc_validFrom, case when  llc.validFrom > llc.validTo then '2100-01-01 00:00:00.000' else dateadd (SS, -1, (lead (llc.validFrom) OVER (partition by llc.dwhIdHubLocations order by llc.validFrom)))end as llc_ValidTo from sat.satLnkLocationsCountry llc) llc on lll.dwhIdHubLocations = llc.dwhIdHubLocations inner join (select scs.dwhIdHubCountry, scs.status, scs.validFrom as scs_validFrom, case when  scs.validFrom >= scs.validTo then '2100-01-01 00:00:00.000' else dateadd (SS, -1, (lead (scs.validFrom) OVER (partition by scs.dwhIdHubCountry order by scs.validFrom))) end as scs_ValidTo from sat.satCountryStatus scs) scs on llc.dwhIdHubCountry = scs.dwhIdHubCountry inner join hub.hubCountry hc on llc.dwhIdHubCountry = hc.dwhIdHubCountry where 1 = 1 and spo.agencyRegion is not null and getdate() between lll_validFrom and lll_validTo and getdate() between llc_validFrom and llc_validTo and getdate() between scs_validFrom and scs_validTo) func2 on b.agentCode = func2.agencyCode and b.companyId =  func2.accessCompanyId)w)q  where RowNumber =
company.dataInDM.RowByKeys = select dwhIdHubCompany,  companyId, companyName, address1, address2, address3, zipCode, homeCurrencyCode, agentCode,   dmStatus as status, validFrom, srcSystemId, dwhIdHubCountry, isLandlockedCountry  from  dim.dimCompany

fileLiner.dwh.CountRows = select count (*) c from (select distinct dwhIdHubFileLiner, validFrom from sat.satFileLiner union select distinct dwhIdHubFileLiner, validFrom from sat.satFileLinerStatus) q
fileLiner.dim.CountRows = select COUNT (*) c from (select dwhIdHubFileLiner, validFrom  from dim.dimFileLiner)q
fileLiner.dataInDV.RowByRowNum = select * from (SELECT ROW_NUMBER() OVER (Order by hubSat.dwhIdHubFileLiner) AS RowNumber, hubSat.dwhIdHubFileLiner, hubSat.serviceCode, hubSat.fileLinerNr, hubSat.accessCompanyId, hubSat.expPolDate, hubSat.impPodDate, hubSat.voyageNr, hubSat.vesselName, hubSat.temporaryFlag, hubSat.openDate, hubSat.closeDate, hubSat.callId, hubSat.sailingWeek, hubSat.proformaDate, hubSat.status,  hubSat.srcSystemId, satStatus.status as satStatus, satStatus.validFrom from sat.satFileLinerStatus satStatus inner join (select distinct hub.dwhIdHubFileLiner, hub.serviceCode, hub.fileLinerNr, hub.accessCompanyId, sat.expPolDate, sat.impPodDate, sat.voyageNr, sat.vesselName, sat.temporaryFlag, sat.openDate, sat.closeDate, sat.callId, sat.sailingWeek, sat.proformaDate, sat.status,  hub.srcSystemId from sat.satFileLiner sat inner join (select dwhIdHubFileLiner, serviceCode, fileLinerNr, accessCompanyId,  srcSystemId  from hub.hubFileLiner) hub on hub.dwhIdHubFileLiner = sat.dwhIdHubFileLiner) hubSat on hubSat.dwhIdHubFileLiner = satStatus.dwhIdHubFileLiner) q where RowNumber =
fileLiner.dataInDM.RowByKeys = select dwhIdHubFileLiner, serviceCode, fileLinerNr, accessCompanyId, expPolDate, srcSystemId , impPodDate, voyageNr, vesselName,temporaryFlag, openDate, closeDate, callId, sailingWeek, proformaDate, status, dmStatus as satStatus, validFrom from  dim.dimFileLiner

transportMode.dim.CountRows = select COUNT (*) c from (select dwhIdhubTransportMode, validFrom  from dim.dimTransportMode)q
transportMode.dataInDV.commonPart = FROM (SELECT hubSat.*, satStatus.status AS dmStatus FROM sat.satTransportModeStatus satStatus INNER JOIN(SELECT distinct sat.validFrom, hub.*, sat.transportModeName FROM sat.satTransportMode sat INNER JOIN (SELECT DISTINCT dwhIdhubTransportMode, transportModeCode, carrierCode, dtxCode,segmentCode, accessCompanyId, srcSystemId FROM  hub.hubTransportMode ) hub ON hub.dwhIdhubTransportMode = sat.dwhIdhubTransportMode) hubSat ON hubSat.dwhIdhubTransportMode = satStatus.dwhIdhubTransportMode UNION SELECT satStatus.validFrom, hubSat.*, satStatus.status AS dmStatus FROM sat.satTransportModeStatus satStatus INNER JOIN(SELECT distinct  hub.*, sat.transportModeName FROM sat.satTransportMode sat INNER JOIN (SELECT DISTINCT dwhIdhubTransportMode, transportModeCode, carrierCode, dtxCode,segmentCode, accessCompanyId, srcSystemId FROM  hub.hubTransportMode) hub ON hub.dwhIdhubTransportMode = sat.dwhIdhubTransportMode) hubSat ON hubSat.dwhIdhubTransportMode = satStatus.dwhIdhubTransportMode)w
transportMode.dataInDM.RowByKeys =  select validFrom,  dwhIdhubTransportMode,  transportModeCode, carrierCode, dtxCode,segmentCode, accessCompanyId, srcSystemId, transportModeName, dmStatus from  dim.dimTransportMode

vesselRegistry.dim.CountRows = select COUNT (*) c from (select dwhIdHubVesselRegistry, validFrom  from dim.dimVesselRegistry)q
vesselRegistry.dataInDV.commonPart = FROM (SELECT distinct hubSat.*, satStatus.status AS dmStatus from sat.satVesselRegistryStatus satStatus inner join (select DISTINCT sat.validFrom, hub.*, sat.vesselName, sat.callSign, sat.lloydsNr from sat.satVesselRegistry sat inner join (select dwhIdHubVesselRegistry, dictionaryType, feederCode, sequenceNumber, accessCompanyId, srcSystemId  from hub.hubVesselRegistry) hub on  hub.dwhIdHubVesselRegistry = sat.dwhIdHubVesselRegistry) hubSat on hubSat.dwhIdHubVesselRegistry = satStatus.dwhIdHubVesselRegistry UNION  SELECT distinct satStatus.validFrom, hubSat.*, satStatus.status AS dmStatus from sat.satVesselRegistryStatus satStatus inner join (select DISTINCT  hub.*, sat.vesselName, sat.callSign, sat.lloydsNr from sat.satVesselRegistry sat inner join (select dwhIdHubVesselRegistry, dictionaryType, feederCode, sequenceNumber, accessCompanyId, srcSystemId  from hub.hubVesselRegistry) hub on  hub.dwhIdHubVesselRegistry = sat.dwhIdHubVesselRegistry) hubSat on hubSat.dwhIdHubVesselRegistry = satStatus.dwhIdHubVesselRegistry)w
vesselRegistry.dataInDM.RowByKeys = select validFrom, dwhIdHubVesselRegistry, dictionaryType, feederCode, sequenceNumber, accessCompanyId, srcSystemId,  vesselName, callSign, lloydsNr,  dmStatus from  dim.dimVesselRegistry